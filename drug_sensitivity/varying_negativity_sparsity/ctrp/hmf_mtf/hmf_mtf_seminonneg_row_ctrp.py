"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the semi-nonnegative D-MTF version with row-wise posterior draws.
"""

import sys, os
project_location = os.path.dirname(__file__)+"/../../../../../"
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'orderG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'rows',
    'orderSn' : 'rows',
    'orderSm' : 'rows',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_n = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        R = [(R_ctrp,    M_train,   'Cell_lines', 'Drugs', alpha_n[1]),
             (R_gdsc,    M_gdsc,    'Cell_lines', 'Drugs', alpha_n[0]),  
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', 'Drugs', alpha_n[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', 'Drugs', alpha_n[3])]
        C, D = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Rn(n=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.3132799088296032, 0.3949960394963139, 0.43687421374126034, 0.41246380267459315, 0.4263916016306698, 0.3245607875125759, 0.4521169907898226, 0.49634550390850984, 0.4073344498707605, 0.324998876834135], [0.4943134118032966, 0.40889519495020166, 0.4544554937373574, 0.38310742208585546, 0.4434895732448282, 0.43354579125260484, 0.3990836250336667, 0.4481405739864196, 0.46245198013398836, 0.4280097493233733], [0.40960689491987556, 0.42437243936415825, 0.4380796559723086, 0.43928890122878705, 0.4688652981299636, 0.4054660964497877, 0.39299474414505364, 0.4621964653674948, 0.4253305755039475, 0.444370424629866], [0.4109088190687602, 0.4444879067276837, 0.4412348061189195, 0.43173898851879255, 0.4103284980055736, 0.4338473481725358, 0.39254199317780125, 0.43135408208132087, 0.40782251247635126, 0.4144772375854613], [0.43070157896414807, 0.4274438266274435, 0.43400494916517773, 0.42077645717386414, 0.4343661482686936, 0.4300037313935072, 0.40525566138712565, 0.3996462779307687, 0.4417562172213483, 0.4364739610062224], [0.4336369950995893, 0.413768427260211, 0.42082723288339774, 0.4185751530292281, 0.4225679063014768, 0.425561455412951, 0.4181038537808319, 0.404437909590031, 0.4318487218106333, 0.4219963452126856], [0.4049644534896306, 0.38326210831820307, 0.41690237624183857, 0.4191464788774688, 0.4140504307477385, 0.398335198729281, 0.4199778049409514, 0.40224194409838654, 0.41903258012469446, 0.39593084343241214], [0.396871717636204, 0.3947278106823826, 0.4122400811957311, 0.4162949821949272, 0.39385071361331425, 0.42092918997781925, 0.3930212819361293, 0.40543080428593814, 0.43019903300261253, 0.3999910520134756], [0.39878680759173946, 0.4015081052146222, 0.40502052783211073, 0.40748811725138767, 0.3927189523462017, 0.3981054084079484, 0.3977934088340168, 0.38965188493287317, 0.4034350490255634, 0.41973155896015635], [0.39070107131156373, 0.3666691721316251, 0.39788489250949755, 0.3839268025530417, 0.4136467771452058, 0.39251838226591795, 0.4027006289489762, 0.40388329687258395, 0.40172917851331125, 0.4042936190350057], [0.3861535198481433, 0.3682785435882546, 0.3673810115285223, 0.37115906875603444, 0.3979240239978401, 0.39963044684672244, 0.39154117398705524, 0.39528761344842755, 0.3779941884473017, 0.37828769179026756], [0.36679520023459056, 0.3683603265145815, 0.337483096193435, 0.37317425308766217, 0.37457622244643096, 0.39283942077015244, 0.38487336524234583, 0.3633917459428828, 0.3672181862745201, 0.37314129494202675], [0.3504975585482665, 0.3718945744289509, 0.35014806661155606, 0.3624311570788682, 0.3869458730448546, 0.3369000763593446, 0.35979318410534267, 0.36765436934410334, 0.3706243088361053, 0.3760735270662936], [0.304581400212109, 0.3571067683137017, 0.365168858189861, 0.32401755067267923, 0.35412183595441127, 0.32928271825037514, 0.3529604733332219, 0.34632271903286715, 0.330041705581803, 0.3507779308602442], [0.34193334731728764, 0.31395906909587146, 0.33415416113840235, 0.3011233185539345, 0.3131385771742373, 0.32261673007024716, 0.3500393982294947, 0.34543493926259916, 0.2946850764707233, 0.30505207390507294], [0.3048457086377603, 0.24412253818264573, 0.2981212812472783, 0.2826180456099454, 0.29527131469593637, 0.2154039236193651, 0.2824423806108918, 0.32376194859813745, 0.2663728307608386, 0.3011292715536209]], 'MSE': [[0.098984139558835241, 0.094175744662924069, 0.087356085411587764, 0.083377374302378002, 0.080877287645590767, 0.1071107914449321, 0.091213275289966228, 0.082491839700444755, 0.098492625655751689, 0.11259647972089136], [0.082028835489514271, 0.092651477998117918, 0.085739490903827681, 0.10138886877113738, 0.089291095059731151, 0.090623182854991879, 0.095311725858098093, 0.081271922058662696, 0.087437999837823868, 0.093638249046769303], [0.092756504136967788, 0.091371470947674699, 0.088179192513405849, 0.089074787955331469, 0.085009111447101562, 0.095752649776507368, 0.096318791669443779, 0.088405331766232748, 0.08843993475429443, 0.087541110538215047], [0.092252332253216329, 0.089168998001645836, 0.090915948924634477, 0.08919750434865345, 0.093047874642605055, 0.090933155810295152, 0.095864448452568238, 0.090407571043772353, 0.095796231716247987, 0.09659466434775052], [0.090361933285555376, 0.092532211067855641, 0.08931288738383257, 0.090774994508841814, 0.089672753794079199, 0.09134413816860372, 0.095582119077913169, 0.096472313335238008, 0.087913778121714845, 0.087380333103524235], [0.091079005205227645, 0.093146017085871446, 0.092870266058739243, 0.094594328545470882, 0.090633415502530346, 0.092483567344606124, 0.092915270950770665, 0.093888899131421094, 0.092180054755157156, 0.093440257960087883], [0.094503636128867197, 0.098827434559323787, 0.091942412755823807, 0.09366332599892882, 0.093740183206487929, 0.094847761657875868, 0.091634456097873157, 0.096188097129484132, 0.091316434366924715, 0.09529024445667085], [0.096600990964187797, 0.096498516908238685, 0.092701052153594754, 0.092953921312978499, 0.096350413268729465, 0.093416501430334781, 0.097571275298015708, 0.094394596952791815, 0.091448550586342686, 0.095459999591829783], [0.094299675114730502, 0.096149021110012708, 0.095236784161818175, 0.094080488760239334, 0.096402256669241793, 0.096253541561792222, 0.095313259291198896, 0.096776206407486784, 0.095003142154829509, 0.092154083440800588], [0.096676823874851853, 0.10132631694168188, 0.095382258992853644, 0.098119029266220598, 0.093048906700315306, 0.096718006929956149, 0.094662807010446839, 0.094754476864188253, 0.094784118668785736, 0.095418880690011171], [0.097491806198390665, 0.099426653460052486, 0.10042305108810629, 0.10070864978851027, 0.095206121149942341, 0.096093336293903459, 0.096964137589818852, 0.097078450842385547, 0.097947445124052512, 0.099257421560903517], [0.10064150312537079, 0.10140652195032425, 0.10504397458259543, 0.099888969495387184, 0.099235149686001667, 0.095743254551526283, 0.097001888848548184, 0.10132102053123478, 0.10056389942844932, 0.099481211766177691], [0.10363653447772689, 0.10057738955006745, 0.10259278781105652, 0.10086133766518322, 0.097362054407569842, 0.10523947841663746, 0.1012037772428714, 0.10068309398516591, 0.099845481595171634, 0.098899949128809492], [0.11033740132851126, 0.10267076309558362, 0.10107049844894306, 0.10757507992594104, 0.10271793342569324, 0.10743087970623934, 0.10312550935626899, 0.10366711472289356, 0.10669605617756245, 0.10321100556481876], [0.1047328342167492, 0.10909686800336015, 0.10585755826740455, 0.11109649575676664, 0.10936729460297205, 0.10758714397886286, 0.10367823211497358, 0.10372420481671116, 0.11212059002109526, 0.1102095174985275], [0.11068548455601973, 0.11957570330263464, 0.11175029155238302, 0.11466765291720418, 0.11179421756376585, 0.12563855007707039, 0.1141026932401026, 0.10751583781861035, 0.11686188932191705, 0.11117607892319413]], 'Rp': [[0.58290854715288065, 0.62977018582507949, 0.6642140279123282, 0.65030242902351953, 0.66484251684616791, 0.5876142894956965, 0.67360553898397513, 0.70712879398103912, 0.64161931857168486, 0.5889593971811411], [0.70439469746225281, 0.6417309603080027, 0.67539410052139903, 0.62266648831415139, 0.66608370706987285, 0.65958634287283113, 0.63724577088943635, 0.67210051613558153, 0.68070097332164259, 0.65639076626726278], [0.64443690366787409, 0.65317761774245442, 0.66256980533203591, 0.66402228340875291, 0.68534744850156382, 0.63902369686672311, 0.6359521732218717, 0.68080568762663685, 0.65427679458123156, 0.6684983585651082], [0.64313862427093893, 0.66759346357651328, 0.66483926445369501, 0.65838030027747063, 0.64303237952650805, 0.65996082260437383, 0.6330642981242981, 0.658297258198417, 0.64239681933663206, 0.64843864295552878], [0.65750861614982137, 0.65599276221648306, 0.65993550147446267, 0.65197027302999699, 0.66013793335630511, 0.65784924080599727, 0.6393250337615759, 0.63561318867451622, 0.66579303181821137, 0.66262435057538849], [0.66024656078768795, 0.64579545952644357, 0.65255940647985022, 0.64924863701349633, 0.65168059479510365, 0.65402048286748327, 0.64863320825872217, 0.63847441382610792, 0.6579941985310529, 0.65096263985141856], [0.63936124902373737, 0.62422672263190926, 0.64826242408846368, 0.64882715592840801, 0.64538868564528651, 0.63473832015361564, 0.64976621977039328, 0.63683793357468466, 0.65031899011577687, 0.63282009963421693], [0.63277959827944197, 0.63269052045752683, 0.64358627567115578, 0.64664211893528922, 0.6306568585392317, 0.6504512654490574, 0.63275925301901348, 0.63992242894873463, 0.65698732240814672, 0.63658521978684968], [0.63574246200086426, 0.63613793514303241, 0.63831429852064647, 0.64093912026299271, 0.63072952205212407, 0.63608417077296919, 0.63553726358773954, 0.62931062721674391, 0.63949769385422039, 0.64963172608340314], [0.63031510436639415, 0.61257168868874778, 0.63346422216022225, 0.62396525317955898, 0.64404694702927057, 0.62938184056512136, 0.63612290505222724, 0.63899562039024527, 0.63638648296140243, 0.63775877398419634], [0.62693061728818555, 0.61393146338004412, 0.6123404835900943, 0.61677885973261348, 0.63356526676275626, 0.63382879426762773, 0.62954233136600912, 0.63136677582379153, 0.61962446747497335, 0.62097336808066472], [0.61418655037251157, 0.61493510644030069, 0.59964636421443862, 0.6165661133819762, 0.6171187536726076, 0.62843845349730554, 0.62480443703498689, 0.61026603782695321, 0.61117544234416621, 0.61669355141576754], [0.60264841448672168, 0.61499588945954797, 0.60152814134691512, 0.60805177805419064, 0.62458433708885341, 0.59617748766293843, 0.60786021436439341, 0.61037279773381437, 0.61283358764647355, 0.61812625377106112], [0.57556031004553132, 0.60245191505254336, 0.61147717920531741, 0.58688331208950251, 0.60071804169298237, 0.58698610538545637, 0.60020109309732661, 0.59451121233497495, 0.58869616550592052, 0.59769560139521039], [0.59047424737792575, 0.57938944067984788, 0.59006247081588947, 0.56500586317867452, 0.58105506545932084, 0.58186635354734551, 0.5975331195813619, 0.59634850300720887, 0.566249792166578, 0.57443325221242725], [0.56873572712790132, 0.54380315238897248, 0.56052591634703519, 0.55078640570416104, 0.56621726470237055, 0.51877825599271321, 0.56051488984915676, 0.5812531945592655, 0.54437404965012914, 0.56488386897592746]]} 
average_performances = {'R^2': [0.3989362175288244, 0.43554928155515926, 0.4310571495711243, 0.4218742191933201, 0.42604288091382997, 0.4211324000381037, 0.4073844219000605, 0.40635566665385336, 0.401423982039662, 0.39579538212867293, 0.38336372822385695, 0.37018531116486286, 0.3632962695423686, 0.34143819604012743, 0.32221366912178706, 0.28140892435164205], 'MSE': [0.093667564339330198, 0.089938284787867431, 0.090284888550517473, 0.092417872954138947, 0.091134746184715856, 0.092723108253988246, 0.09419539863582603, 0.094739581846704404, 0.09516684586721505, 0.096089162593931146, 0.098059707309606586, 0.10003273939656157, 0.101090188428026, 0.10485022417524552, 0.1077470739277423, 0.1143768399272902], 'Rp': [0.63909650449735134, 0.66162943231624338, 0.65881107695142527, 0.65191418733243744, 0.65467499318627576, 0.65096156019373663, 0.64105478005664929, 0.64030608614944462, 0.63719248194947364, 0.63230088383773864, 0.62388824277667609, 0.61538308102010142, 0.60971789016149092, 0.59451809358047658, 0.58224181080265791, 0.55598727252976332]}
'''