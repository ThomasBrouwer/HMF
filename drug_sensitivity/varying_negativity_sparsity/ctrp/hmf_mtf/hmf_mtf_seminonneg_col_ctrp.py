"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the semi-nonnegative D-MTF version with column-wise posterior draws.
"""

import sys, os
project_location = os.path.dirname(__file__)+"/../../../../../"
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'orderG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'columns',
    'orderSn' : 'individual',
    'orderSm' : 'individual',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_n = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        R = [(R_ctrp,    M_train,   'Cell_lines', 'Drugs', alpha_n[1]),
             (R_gdsc,    M_gdsc,    'Cell_lines', 'Drugs', alpha_n[0]),  
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', 'Drugs', alpha_n[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', 'Drugs', alpha_n[3])]
        C, D = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Rn(n=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.3164649878833783, 0.44117592485595747, 0.46336377785807914, 0.27608504673811163, 0.5142797716894822, 0.356750473344833, 0.39400632903000854, 0.4436685954329661, 0.308634017917117, 0.4312048184815025], [0.44385549932363944, 0.4823074626508207, 0.44435127693963306, 0.4313506761593965, 0.4156216086835123, 0.4523769504423908, 0.43255604311739626, 0.4354382023299517, 0.41309010497492393, 0.3984229713458053], [0.44450395687475164, 0.43534785209714455, 0.44047070879236194, 0.43139014884969273, 0.4101121836923646, 0.40443912162887974, 0.39178269430771784, 0.44532884249666105, 0.4797905483687944, 0.4307137904418845], [0.41407678641570456, 0.42211529271916703, 0.42127909884289216, 0.41833535418384793, 0.41742893193003916, 0.42951694194138246, 0.43199637480913167, 0.441743168391299, 0.4081166156546103, 0.41579476514940794], [0.43853391848658174, 0.4344834682726221, 0.4259849886607975, 0.4244392589163035, 0.40389964228887, 0.4445100616145936, 0.4089586066193729, 0.42982238051005706, 0.440866765061692, 0.4250315190024899], [0.3874175514789815, 0.3979516597446312, 0.4319623168077863, 0.41547821766843784, 0.4315620849669497, 0.4149766296989149, 0.3942099962805471, 0.40158441444220616, 0.39249785309863516, 0.40880949364338826], [0.4219202404151037, 0.41329050448385507, 0.40759732163408835, 0.4108056640732285, 0.43313664902390503, 0.4152002789730309, 0.4021783462428573, 0.41574914360802806, 0.4101419272306768, 0.4146496552147537], [0.4130265242242054, 0.40473442591224373, 0.3718712496112597, 0.3935029532868888, 0.37972684802503776, 0.41760189844548523, 0.40253912500673983, 0.4202461092977492, 0.41963255504885255, 0.38354571457906794], [0.4162284354330211, 0.3894852078870956, 0.4208959021148767, 0.3914712008371276, 0.4141270492063739, 0.3988787612744751, 0.40174624356604005, 0.3866706816326362, 0.3975397744238657, 0.4126356807739959], [0.3944048799724488, 0.38502418272567973, 0.39960964859563786, 0.39630515365753005, 0.40273036334774237, 0.38598364371761174, 0.3902307234236526, 0.39481623451807024, 0.39251137366698363, 0.4040304960648313], [0.38462873977688594, 0.3861948354651682, 0.3846530136164449, 0.3846308600336089, 0.40443402716550736, 0.3474226318802408, 0.38242265128583053, 0.382141595872841, 0.3762110381381275, 0.38332699125693726], [0.40051645066920083, 0.38295601087713604, 0.38495090349016226, 0.37701880894583206, 0.3648977039977245, 0.3821739867224542, 0.37623443964756176, 0.37255412033860114, 0.38373663108589073, 0.36286245338267087], [0.3642135184873784, 0.3643796058040224, 0.36850052410362144, 0.35466320537975304, 0.3439235120066426, 0.3777927901664152, 0.36814110182116944, 0.3588375228633026, 0.38512232733902574, 0.3209684873199107], [0.3442525931328737, 0.3644439823109241, 0.3344119179189772, 0.3649155273496819, 0.3476939314404939, 0.35876954195929955, 0.34140790114740716, 0.32652206170636744, 0.3414557391321261, 0.3583503207696427], [0.3295925364569191, 0.3022512702819269, 0.32560062297688774, 0.33736312923852263, 0.315086344296459, 0.3296319200014377, 0.3390567123119963, 0.32519418955995893, 0.3413336258409513, 0.3252131902982227], [0.31440682183655666, 0.3016396236919342, 0.2339822497567544, 0.2758940311192175, 0.2338707898228669, 0.2771098550648182, 0.2648964201652171, 0.3125669146519827, 0.29954770173947654, 0.30169684151052023]], 'MSE': [[0.10167227563112551, 0.098032450509495939, 0.08003413597652799, 0.11308405425019272, 0.068709912640686294, 0.092701324337690891, 0.10291105594709114, 0.088798792108146118, 0.10003700144291344, 0.083476113541397598], [0.0863667237857456, 0.083997866626616971, 0.091605539022545118, 0.090126504257742671, 0.090722951788001355, 0.088826249875217977, 0.092070450200300566, 0.092975517588135048, 0.090304778375816394, 0.097494846657566456], [0.088428396140349044, 0.089341438115039126, 0.089241110919688352, 0.090774022279034652, 0.088719611459342956, 0.093949739508874752, 0.096177048047355163, 0.089166198640941829, 0.082320588443971859, 0.092552316068979804], [0.091905070400106481, 0.091981798151421393, 0.091869161886051653, 0.093021154510582876, 0.093060798573764661, 0.091144747485298425, 0.091968255371373264, 0.088118108857161051, 0.093212175118804738, 0.091812585357394075], [0.089603453322623872, 0.090584690908427981, 0.093226263977738116, 0.089605572326346, 0.094239325457532289, 0.089254935259217821, 0.094239343692837693, 0.090030923639418267, 0.087493377178968837, 0.091263234485948613], [0.096997210758883914, 0.09689312296458065, 0.089972073433023381, 0.09165105241634143, 0.091030538388318219, 0.093340548563242975, 0.09532898053598908, 0.095275124854488982, 0.095889715808578219, 0.094638578859343389], [0.090647603928946913, 0.091842588647929227, 0.095555666423085259, 0.093002187263243566, 0.090692190511817067, 0.091541085723871443, 0.095258427309387508, 0.093342695938827727, 0.094479458039917558, 0.094058766391803939], [0.09284430905394174, 0.094127500008802656, 0.099716537100669911, 0.095135141153854019, 0.099697370245434069, 0.092845473538850087, 0.095863459481155641, 0.091362082466677957, 0.091590811551994347, 0.09806243725328484], [0.092998939539077979, 0.097343147780334621, 0.091434307231577819, 0.097137474720302958, 0.092851983131757243, 0.094967303342516199, 0.09618003255481189, 0.097455965385223581, 0.095720395412678322, 0.092330928186832001], [0.094564336930386489, 0.098825435627363123, 0.095689993694924147, 0.097205529107628419, 0.09462312573281989, 0.097524475018071696, 0.097039298229820048, 0.095719777600143413, 0.09625840754840409, 0.094579689927921345], [0.098696792357015423, 0.09706281984716579, 0.097890994506978107, 0.09726589331315029, 0.094092219772219363, 0.10334716131774735, 0.098527796153287842, 0.098798548810855272, 0.099789966603400615, 0.097778473611969161], [0.094960779950557059, 0.098077930307992486, 0.097984801056422821, 0.099638439773315726, 0.099877177765527139, 0.098551463124500652, 0.099878258238515386, 0.098550163765635579, 0.098454044344444325, 0.10092701387958683], [0.1007115691519795, 0.10058340523424239, 0.10101489439515587, 0.10287842800886343, 0.10403977889883949, 0.098519335296616051, 0.1007960261802983, 0.10250769846438315, 0.097992538747257316, 0.10801283579499811], [0.10369796196200901, 0.10054462696036724, 0.10603099479566666, 0.10121227254535156, 0.10376989384975245, 0.10094096394551302, 0.10418887983266142, 0.10838685305573634, 0.10528664332928223, 0.10173999328691868], [0.10626348806066266, 0.11127114242388174, 0.10705791556186489, 0.10488370550439292, 0.10953620456027142, 0.10690760962279205, 0.10478515238973875, 0.10727678177392731, 0.10532555026795679, 0.10700715394775488], [0.10957746530241765, 0.11110420442087189, 0.12220148498685872, 0.11521694775834782, 0.12170792200640367, 0.11495202471344286, 0.1166883989293418, 0.10906210103297127, 0.11197355326959003, 0.11094239070892045]], 'Rp': [[0.57111261594744378, 0.66942088930327859, 0.68122287019921346, 0.54180415755895017, 0.7171668076826383, 0.60371897356442017, 0.63256594170130387, 0.66684126616711858, 0.5685492047416898, 0.65816683358547678], [0.66760789601829851, 0.69477768725500189, 0.66774817926607388, 0.65985060185916566, 0.64791114572121988, 0.6737674145187349, 0.65887310769442764, 0.66174954497131744, 0.64573216182945592, 0.63346777205452487], [0.66749455208184683, 0.66177720877197665, 0.66482059655663328, 0.6580553955133166, 0.64491051969883839, 0.64096854253810043, 0.63089390290190972, 0.66824667485327693, 0.69276393119359436, 0.65710739041244481], [0.64860658275245686, 0.65123455790967011, 0.65058132657332512, 0.6493783156365982, 0.64718199788980935, 0.65671612158542392, 0.65868256408374182, 0.66705276805569735, 0.64168280030085145, 0.64777831755747639], [0.66346297766422746, 0.66105303494919654, 0.65434867120421669, 0.65402410756771634, 0.63901933161960567, 0.66716415846225119, 0.64210658794415421, 0.65670668100898189, 0.66544264011171361, 0.65300484854812069], [0.62803242173950058, 0.63390425449148435, 0.65932321245365366, 0.64840626332442197, 0.65747266851540198, 0.64605943238570751, 0.63241714883991795, 0.63766618226665894, 0.6309504308492373, 0.64139782714695781], [0.65126236884723876, 0.64473263775209699, 0.64099045020808609, 0.64303554473140678, 0.65920123981546208, 0.64744343146649574, 0.63918783029362558, 0.64761465249263606, 0.64384394250266708, 0.64603924439228533], [0.64548298820961991, 0.63970362818055138, 0.61520503068651644, 0.63228249559448113, 0.62090744130121167, 0.64766196167639911, 0.63694944632583728, 0.65040368879834043, 0.64968547631601137, 0.62612557133271818], [0.6473423322291223, 0.62884804654891735, 0.65032634720792037, 0.62920300104749238, 0.64505137843256866, 0.6339044102389475, 0.63620552360518512, 0.62889122597630165, 0.63378323511988177, 0.64449907313485766], [0.63158965314734838, 0.62455368817073686, 0.63405337279722107, 0.6319560162559732, 0.6376298624617478, 0.62582098935054287, 0.62938385992205081, 0.63215103216836444, 0.63211739981575854, 0.63766864348618013], [0.6233060542122042, 0.62569212739853808, 0.62458431882283727, 0.62526575261519035, 0.63783687041843051, 0.60044128014341103, 0.62369447837905068, 0.6226771162770367, 0.61854596530797579, 0.62411341755690519], [0.63387149844478774, 0.62390043905217374, 0.62475819058068816, 0.61992115722386365, 0.60962870119493695, 0.62275253774750083, 0.61747292656909436, 0.61755444820352212, 0.62262562210956729, 0.61131878891585711], [0.60684151673374032, 0.60998833533075436, 0.61101718971204755, 0.60430194158746764, 0.59730319303957746, 0.61834284385685545, 0.61179008611566588, 0.60579691119071044, 0.62305553060365104, 0.58310285991026356], [0.59972057185064798, 0.61089473804630956, 0.58808802838934915, 0.60908722509087299, 0.59764458312464397, 0.60643495708875617, 0.5954375580725958, 0.58092788810783735, 0.59365915998823326, 0.60359841158141581], [0.58551013619134928, 0.57042781732819769, 0.58665075596866945, 0.59038093253373447, 0.57502460632699925, 0.58773350800759538, 0.6008258505802343, 0.58608826256934166, 0.59122549340295483, 0.58672566264381265], [0.57106251816938991, 0.56841760552745213, 0.52822348161918375, 0.55519227124183124, 0.53208084272264089, 0.54915181721413908, 0.54849803127280639, 0.57497779161561047, 0.55947932839262882, 0.57162260483088556]]} 
average_performances = {'R^2': [0.39456337432314365, 0.43493707959674693, 0.4313879847550252, 0.4220403330037482, 0.42765306094333794, 0.40764502178304773, 0.41446697308995273, 0.4006427403437531, 0.4029678937149507, 0.39456466996901884, 0.38160663844915926, 0.37879015091572343, 0.36065425952912417, 0.34822235168677934, 0.3270323541263282, 0.2815611249359345], 'MSE': [0.092945711638526746, 0.090449142817768821, 0.090067046962357761, 0.091809385571195862, 0.090954112024905956, 0.094101694658279, 0.093042067017883021, 0.095124512185466539, 0.094842047728511264, 0.096203006941748256, 0.098325066629378927, 0.0986900072206498, 0.10170565101726337, 0.10357990835632587, 0.10703147041132435, 0.11434264931291663], 'Rp': [0.63105695604515344, 0.66114855111882209, 0.65870387145219378, 0.6518895352345051, 0.65563330390801844, 0.64156298420129421, 0.64633513425020006, 0.6364407728421686, 0.63780545735411953, 0.63169245175759237, 0.62261573811315807, 0.62038043100419915, 0.60715404080807323, 0.59854931213406615, 0.58605930255528893, 0.55587062926065678]}
'''