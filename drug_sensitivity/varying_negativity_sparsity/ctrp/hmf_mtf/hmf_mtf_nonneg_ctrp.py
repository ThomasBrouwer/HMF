"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the nonnegative D-MTF version.
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'orderG'  : 'exponential',
    'priorSn' : 'exponential',
    'priorSm' : 'exponential',
    'orderF'  : 'columns',
    'orderG'  : 'columns',
    'orderSn' : 'individual',
    'orderSm' : 'individual',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_n = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        R = [(R_ctrp,    M_train,   'Cell_lines', 'Drugs', alpha_n[1]),
             (R_gdsc,    M_gdsc,    'Cell_lines', 'Drugs', alpha_n[0]),  
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', 'Drugs', alpha_n[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', 'Drugs', alpha_n[3])]
        C, D = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Rn(n=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.3582930605773684, 0.2537615720630172, 0.4367510403642414, 0.4893087342930398, 0.4044623449226227, 0.45222976874263665, 0.41770263782395023, 0.41916130071826185, 0.4742975358294358, 0.46077570726434747], [0.416814002414459, 0.42653452719356066, 0.4145560217213331, 0.47440946868475065, 0.4084565356513785, 0.41797295135615875, 0.4516414987134493, 0.46200576327102094, 0.40316211197948204, 0.40042208630388365], [0.4389033765912448, 0.4265880770026286, 0.398448256385748, 0.42586864786496725, 0.3932125034847842, 0.41756368380068565, 0.4375085232291459, 0.42883690951327114, 0.42012685056189236, 0.42050352919847633], [0.41515902009326233, 0.43682219890831386, 0.43276726481359373, 0.42735855454309546, 0.42839796979948663, 0.44318776012529926, 0.41938002336678293, 0.4181174712419461, 0.44414823318186714, 0.4336321222823468], [0.4194084625259378, 0.4228171502549538, 0.40682516707713945, 0.4142199863344045, 0.4123882408240257, 0.401259010662226, 0.41775562871787564, 0.4209416237382455, 0.41042159741041495, 0.44021826299418954], [0.4242271121684039, 0.4334850748056296, 0.39402918781973184, 0.41618482983404304, 0.4135114175894008, 0.41356515786392845, 0.44950524500551103, 0.4185233889975405, 0.4275906465659153, 0.4086494870502525], [0.41949175631905333, 0.4047430374531372, 0.42590398253061335, 0.41495526596343424, 0.4094303885432613, 0.4061989680398137, 0.40297133794185647, 0.4121377386543301, 0.40643857231405056, 0.4096614187137708], [0.4090089763883099, 0.43256377943733004, 0.4070461684141168, 0.41567479635496274, 0.41411415527713913, 0.4030931872293868, 0.41615003654230276, 0.4103169537318676, 0.4052476361667756, 0.3978280452434776], [0.4097104050805568, 0.3980189156260385, 0.39027444088137664, 0.4055622939757145, 0.39753923759589505, 0.40120575362382294, 0.4131180527818167, 0.41281259096171874, 0.40453359371330255, 0.39407898486268067], [0.41095574784460354, 0.405872926850127, 0.4031587329428036, 0.40686590375511344, 0.4145515324722848, 0.3903573523958156, 0.4026084748758153, 0.40700188110763724, 0.3989881756879704, 0.4222580365574643], [0.39737375498361616, 0.39379097400393104, 0.3913592161742312, 0.40725436208053645, 0.39878087869208223, 0.40218623160598344, 0.39128342098830116, 0.4001872261308145, 0.3943236227913077, 0.38872124586885604], [0.3962498473031193, 0.38600901592752845, 0.37469889114153576, 0.39333930531158756, 0.3825110622369833, 0.40050949029242566, 0.38278012378871573, 0.40293394644467606, 0.38849102828436155, 0.3836632001627852], [0.3783521746310692, 0.39455509506814257, 0.381062577639112, 0.38972731940261307, 0.3843272557103117, 0.39224526252000635, 0.3803493820298056, 0.38983136535094154, 0.3933924436929075, 0.3844050666104216], [0.3801980759955269, 0.35933400696035045, 0.39133786537378545, 0.3738039248885733, 0.3888346893310932, 0.36974987478108823, 0.38973359533859486, 0.3832873911347974, 0.3858578912626799, 0.37973243929053657], [0.34936316736922823, 0.3850057141252855, 0.37118710680305134, 0.37834851109215384, 0.38058546035010343, 0.36615834519857504, 0.3665586020485986, 0.3642059796010275, 0.3741938243206032, 0.38401312669813403], [0.3556659496450155, 0.342315234661435, 0.3685932737642357, 0.33904248149263216, 0.3576581995252319, 0.35264570548496743, 0.35437261299464373, 0.360666591737518, 0.33944957945645216, 0.3633488181227844]], 'MSE': [[0.10345746326626003, 0.11509450944612176, 0.086425004981434642, 0.076452121339125476, 0.089955144298229567, 0.082317196345977089, 0.09468751399156046, 0.10285310442367081, 0.082676522138780281, 0.0898381651779325], [0.094598273231436505, 0.091511616763407855, 0.092247033646439963, 0.084826488170543765, 0.093915049707369164, 0.096282224910763714, 0.087827049615024064, 0.08728191905718255, 0.096674879496988567, 0.095654999781341815], [0.08720295115219405, 0.092757113145043299, 0.097563157311372994, 0.093075911447355275, 0.095423317671103694, 0.092662810332520398, 0.089913010239687521, 0.089608385271752508, 0.092220502518280373, 0.092645371909602828], [0.092977304913041819, 0.091639970076026478, 0.092130872122830887, 0.090721933134278718, 0.09231465875565234, 0.089989984130961695, 0.092414216362621981, 0.092341562133037708, 0.088891634435258132, 0.090977577519179953], [0.092416733765429873, 0.09108373380680386, 0.093417743355890467, 0.092320047286420015, 0.092538591278956903, 0.094022534572000632, 0.089879871804373526, 0.092244327498097065, 0.09386493884057949, 0.089849536268534827], [0.089736202375012189, 0.090150668115374102, 0.093504671709164155, 0.093256195367804662, 0.091797484904986626, 0.093391028349989871, 0.088102818327207205, 0.092502239845200174, 0.090536811043124707, 0.092487307635232163], [0.091203206394712369, 0.095391504923913017, 0.090344301239702871, 0.092374868041799202, 0.094812789274377307, 0.095076690128394176, 0.095238175706776618, 0.093287263022613365, 0.093655844262497484, 0.093930107879814789], [0.094595117987668814, 0.090739322857646132, 0.093281486702739655, 0.093093890759113715, 0.093673357149281627, 0.095198756951257735, 0.09372606511358815, 0.093000362409882492, 0.094383245841441102, 0.096579758483334235], [0.093818389686849968, 0.095712779325098973, 0.096489859401426181, 0.093627512235698873, 0.096499067109533682, 0.095770738571001768, 0.094774508407017052, 0.093773710839081398, 0.095687241918676835, 0.09670026205803306], [0.094454487764647238, 0.094509310414145078, 0.096351853695022582, 0.0936841077081777, 0.093569313501051285, 0.097223387362684668, 0.095170855894276318, 0.094922245820973347, 0.095858018392686484, 0.09302246410048351], [0.095693031853165481, 0.097024190100182636, 0.096461526788741217, 0.095334796110181419, 0.095275378411184969, 0.095444418477942841, 0.097059911731372128, 0.095767072358847252, 0.095348833625939489, 0.096331608570544944], [0.095212353166016464, 0.096192531480587928, 0.09868441414161018, 0.096862099879433436, 0.098764618767704149, 0.094728023584696106, 0.098406554495725634, 0.095291427040504612, 0.097394296289833746, 0.097954811197351582], [0.099391770080796041, 0.096480730086430821, 0.098274581663006483, 0.097402556511082178, 0.096938100696215182, 0.096370724419417547, 0.097954688023789857, 0.097089465558516302, 0.09665299153384671, 0.097633605632091697], [0.098497518927932431, 0.10221586071007099, 0.096943776077026547, 0.099942822354349148, 0.097080553150919999, 0.10001580558651524, 0.097500212459424113, 0.097207272477311202, 0.097269316885059881, 0.098271330044353747], [0.10400697150522586, 0.097983786021322877, 0.099565730836464417, 0.09887635796673297, 0.098416470101334391, 0.10025020074912985, 0.10048007143328792, 0.10070414121357572, 0.099493657299458235, 0.098400661703164236], [0.10229227934189958, 0.10400942307010043, 0.10053097328728237, 0.10445937150629253, 0.10230633621799361, 0.10291676046842389, 0.10230348177878144, 0.10193249582797977, 0.1052018027103316, 0.10152559667415319]], 'Rp': [[0.60216825890871295, 0.51973616296862335, 0.66179377684433549, 0.6996974213766779, 0.64463164638389869, 0.67756471349754199, 0.64804663524218098, 0.64773089305957876, 0.69198376148194507, 0.68025003408554252], [0.64563530011957537, 0.65333358265956709, 0.64557039273284755, 0.69071236074406861, 0.63963971288431964, 0.64667988609115912, 0.67217686282807287, 0.68019235406391443, 0.63592196055020089, 0.63358535405244809], [0.66288810101062456, 0.65343527332875495, 0.6321067759371245, 0.65261395856379323, 0.62826790126708909, 0.64788266229887115, 0.66170615581092918, 0.65556081911515951, 0.64848134637136867, 0.64931418308071254], [0.6446841399314206, 0.66107989501289721, 0.65787317586879956, 0.65375148608772915, 0.65498598032885258, 0.66604800841674316, 0.64764293496743186, 0.64694076917579624, 0.66692616560890594, 0.658606295324492], [0.64839729059646534, 0.65100380488515364, 0.63898494456748756, 0.64426367016987962, 0.64550437939366234, 0.6348007917707621, 0.64715963582860836, 0.65146952632409105, 0.64200631999414859, 0.66379389959799295], [0.65302216985649053, 0.65885652875426648, 0.62994729372961467, 0.64625383943082015, 0.64503342585952805, 0.64416461917520595, 0.67134332873039837, 0.64705872149658883, 0.65530427218718001, 0.6399465129423193], [0.64924196433599746, 0.6362960651559213, 0.65640723235599407, 0.64469807360770526, 0.64067111303960333, 0.63808874476395161, 0.6355616301465894, 0.64274091424729807, 0.63932650811124392, 0.64078802350990161], [0.64024907648945173, 0.65853044375000624, 0.63980708395349473, 0.6450118313154487, 0.64382852923750222, 0.6354020220110862, 0.64512481767058016, 0.64123085604844166, 0.63722087914498726, 0.63135246553283164], [0.64126027372453409, 0.63237362291231092, 0.62652538708966088, 0.63700380940187751, 0.63176277687948479, 0.63385693853863834, 0.64417011705729699, 0.64264875311560665, 0.63702022088827936, 0.62891496908597477], [0.64211383592879412, 0.63802791346274501, 0.63549235144434058, 0.63867442756015391, 0.64515189715311094, 0.62847122885206308, 0.63520446482487281, 0.63859471529034806, 0.63315571828936446, 0.65011980531101288], [0.63107452094040606, 0.62802487496815163, 0.62807777285939381, 0.63881132891539372, 0.63260000985650722, 0.63559276707569656, 0.62570008035285918, 0.63296177874489301, 0.63041313796014042, 0.62592566128368643], [0.63138769329782096, 0.62604780939817162, 0.6167687477895788, 0.62748922300995214, 0.61886477289922159, 0.63476717763420942, 0.61991872587596086, 0.63605679648985602, 0.6245528897702135, 0.62198695404892468], [0.616424886136549, 0.62848646842802369, 0.61879351404129812, 0.62574373069603717, 0.62393642067593824, 0.62775843179706714, 0.62013211881462749, 0.62529965642675789, 0.62746393028147673, 0.62192936486234784], [0.61769905094989208, 0.60437435255275018, 0.62689369605310163, 0.61397577385215329, 0.62678780526201228, 0.61133998106313825, 0.62481277058263895, 0.62138455783713231, 0.62309295296946177, 0.61801358888149094], [0.59333392562850495, 0.62202560326496625, 0.61379146666072149, 0.6167386541036417, 0.61729237567072426, 0.60929350294200801, 0.610504481345575, 0.60788353287600616, 0.6122987463210654, 0.62220593323315176], [0.60305850892191881, 0.59440754369963189, 0.61113210895934134, 0.59815617811447674, 0.60239989694381446, 0.59704037449532232, 0.60105540588323714, 0.60446426358293182, 0.5874866283406518, 0.60369547812611402]]} 
average_performances = {'R^2': [0.4166743702598922, 0.42759749672894765, 0.4207560357632845, 0.42989706183559945, 0.41662551305394124, 0.4199271547700357, 0.4111932466473321, 0.41110437347856693, 0.4026854269102923, 0.40626187644896355, 0.39652609333196603, 0.38911859108937186, 0.3868247942655331, 0.3801869754357027, 0.3719619837606761, 0.35337584468849165], 'MSE': [0.092375674540909267, 0.092081953438049785, 0.092307253099891309, 0.091439971358288963, 0.092163805847708669, 0.091546542767309586, 0.093531475087460125, 0.09382713642559537, 0.095285406955241764, 0.094876604465414821, 0.095974076802810226, 0.096949113004346388, 0.097418921420519264, 0.098494446867296331, 0.099817804882969652, 0.10274785208832386], 'Rp': [0.6473603303849037, 0.65434477667261726, 0.64922571767844273, 0.6558538850723068, 0.6467384263128253, 0.64909307121624127, 0.64238202692742052, 0.64177580051538308, 0.63555368686936642, 0.63850063581168048, 0.63091819329571286, 0.62578407902139099, 0.62359685221601235, 0.61883745300037718, 0.61253682220463657, 0.6002896387067439]}
'''