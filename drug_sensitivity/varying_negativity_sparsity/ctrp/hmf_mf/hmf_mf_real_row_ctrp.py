"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the real-valued D-MF version with row-wise posterior draws.
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'normal',
    'priorG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'rows',
    'orderG'  : 'rows',
    'orderSn' : 'rows',
    'orderSm' : 'rows',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_l = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        D = [(R_ctrp,    M_train,   'Cell_lines', alpha_l[0]), 
             (R_gdsc,    M_gdsc,    'Cell_lines', alpha_l[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', alpha_l[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', alpha_l[3])]
        R, C = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Dl(l=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.4753918036281384, 0.49668971402822515, 0.4444591896510852, 0.586386858383132, 0.38121551546523724, 0.45422176940971504, 0.41002457340706033, 0.40464480282967585, 0.495535383793541, 0.47651938519794323], [0.45595159498807314, 0.45111128928504884, 0.43069790037436984, 0.45798491462522706, 0.4244968953915407, 0.3847295234464224, 0.43931900386996636, 0.41693401518273876, 0.46706334966886554, 0.43590699634010444], [0.43568265668536876, 0.42438027794585587, 0.44811024946175393, 0.44270955327068706, 0.4371690112230938, 0.42579811654187105, 0.41210203013189817, 0.41304417187321896, 0.3967764237021194, 0.4401680293929372], [0.44558977784448284, 0.41895005315679057, 0.40584757524146076, 0.4140338119151007, 0.3754717974417793, 0.43858022956561926, 0.4418599157125308, 0.43497174088897395, 0.4168411003725282, 0.42394458530392276], [0.4207752599897919, 0.4173374110066619, 0.4119738872942461, 0.39771222852645705, 0.42986128830145454, 0.43949336090150415, 0.4408624945641124, 0.43621910876547776, 0.44138193638986, 0.4322621998655568], [0.4157015082755212, 0.41899237613636997, 0.4096825550999945, 0.407402388353876, 0.4138059115874779, 0.4189694994146548, 0.42704116415910853, 0.41742868674460754, 0.4198804093998657, 0.4258992860924582], [0.41712622553944856, 0.41509682676862547, 0.4224544201306324, 0.3950655613688877, 0.4106678489707781, 0.40852795269430087, 0.4120612011116176, 0.41576821958031396, 0.41704528339663116, 0.39425351986377044], [0.4168075808794023, 0.41553270387100627, 0.42258891371707985, 0.39231844514353664, 0.39331179538698113, 0.4008707170427116, 0.40687440588431745, 0.411381259042074, 0.40146346755809015, 0.4042876031658441], [0.4016614732133703, 0.41920244795621964, 0.39360671213862863, 0.40041920901389993, 0.3982299862810973, 0.3904888878046082, 0.3952005983166117, 0.4104662901956181, 0.3995055596103806, 0.41543280401564964], [0.3770406875800799, 0.3996895526685026, 0.40163383184025403, 0.37148631254201003, 0.39128774430365254, 0.3947521552850056, 0.3931236102402834, 0.39547657145288084, 0.391872587927932, 0.385034283853401], [0.38914786290303216, 0.383280621698772, 0.3744883986881916, 0.37852702079715317, 0.38676971876533717, 0.37377234777638113, 0.3966323504052224, 0.38591873472212035, 0.3663623995227828, 0.37970025561859655], [0.3775331451072742, 0.3605713531789303, 0.39353429304937715, 0.37369243977287314, 0.3860122238805048, 0.3655978161219252, 0.35134211342133126, 0.3721818955377203, 0.3657415243746287, 0.3797616993098556], [0.3750775238170784, 0.3783255462658124, 0.36200654652228315, 0.36790814743203726, 0.3699961015443365, 0.37617370211054235, 0.3675185049437394, 0.3575620401768673, 0.37745951800595445, 0.3672295831864525], [0.36071452262074544, 0.34538019830129585, 0.35356101721512245, 0.36199627312929605, 0.35272737872253623, 0.33011507646493354, 0.35635115285995833, 0.34403260506220823, 0.3692566506275755, 0.350456573145855], [0.3519445873975109, 0.3421794841046608, 0.34071590289172515, 0.3394641687367793, 0.34501674994787646, 0.35381191401993417, 0.344376689360701, 0.36319547828610954, 0.3558156503015423, 0.3433146495032725], [0.32375664892281264, 0.33715303289959786, 0.3314052698959198, 0.33517193047362026, 0.3489233833210986, 0.3397559812534172, 0.32495895880917347, 0.33961059327536747, 0.34401735009027545, 0.3306783701146512]], 'MSE': [[0.086525963894329899, 0.082192354455235039, 0.095658133772732162, 0.067184521602655548, 0.094743644650085418, 0.090298996661447639, 0.096223706514161761, 0.095645659737417094, 0.09058773172054245, 0.088308395964516381], [0.087755112626336867, 0.088726089421826179, 0.089771478997158094, 0.085664808569323347, 0.093811689602695592, 0.095059504255733021, 0.091075924054337218, 0.092812393209637342, 0.085790285427349372, 0.090153680949388096], [0.09123048461990238, 0.091169419767266793, 0.087568502351195482, 0.087769131598825073, 0.089044563522565331, 0.090008283482964177, 0.089159955491300832, 0.094456310282455075, 0.092581148409143429, 0.090298040806911575], [0.088550518007432147, 0.093022328301370874, 0.095516655038154361, 0.092036636770215605, 0.096399569368317534, 0.087620456998031435, 0.089154870300629158, 0.089909048133748587, 0.093218770407014859, 0.093332223115269633], [0.090669946341012331, 0.091670925603064404, 0.09261903681212183, 0.095697760818665475, 0.088889390590659451, 0.088505101110924356, 0.08949961058637354, 0.088979074502282846, 0.090390088582542313, 0.088769487515532763], [0.092549309303570221, 0.091933540052686308, 0.092390646712426042, 0.093326049882901149, 0.094057990929880791, 0.093314154836636881, 0.092957501105239468, 0.09177654354607985, 0.092554607821410312, 0.091884413600913664], [0.092790104691727285, 0.093613569436454061, 0.090311585031317018, 0.09619535621666471, 0.096162148050312063, 0.095078900319950879, 0.094940117499326002, 0.09440843797114154, 0.094203987098751066, 0.095213770442734491], [0.091959541949956189, 0.092195657982256082, 0.091673392272370577, 0.095088220580109337, 0.096049339152589633, 0.094881082714816448, 0.092497828629537093, 0.094141241098134668, 0.094421799669159798, 0.092733832693272858], [0.09449808706289034, 0.09262043996083788, 0.096364989873214429, 0.095916070445537654, 0.095891668813455913, 0.096718551448379014, 0.095741734952724311, 0.093789577766310056, 0.0952031909291286, 0.093453751115035857], [0.09931794838863621, 0.095146336011213403, 0.095626319305495755, 0.098448008120766178, 0.097003252792526362, 0.097000164920758927, 0.096578382620400277, 0.095656881738686278, 0.097079047666580431, 0.098123296060785556], [0.096664192883186756, 0.098712318965244947, 0.099096807095819736, 0.098610050997107832, 0.097346989474189405, 0.098529457175394436, 0.096196390509438595, 0.097211567995058076, 0.10034076440586968, 0.098477033511422229], [0.099019719341691015, 0.1013190136191487, 0.096333271425698863, 0.099560062695714796, 0.098027464710696899, 0.10102681784165897, 0.10307392937285967, 0.10001335491601955, 0.1005348881615168, 0.098951364414881407], [0.099078045428303105, 0.098743649288024371, 0.10099072682014665, 0.10034045325362138, 0.10086069216696421, 0.099383428369850924, 0.10068172100222017, 0.10285552936339916, 0.098846137450135041, 0.10073855603102566], [0.10193959521450642, 0.10341845839206441, 0.10279707975788997, 0.10150396398375849, 0.10304444523920439, 0.1062539253518988, 0.10259830342541748, 0.10392810282649941, 0.10012743833232171, 0.10311571129272264], [0.10324921217950127, 0.10514505244316727, 0.10467578770199625, 0.10471436474519041, 0.10466309459289649, 0.10293704590484644, 0.10453947495678077, 0.10108153150950736, 0.10208236676013561, 0.10521536145295371], [0.1078376454941412, 0.10565663839222493, 0.10628234321302733, 0.1064134698730573, 0.10374380619444165, 0.10486046924959393, 0.10743202999810689, 0.10527192892609127, 0.10431510376919682, 0.10631757755011081]], 'Rp': [[0.69159627616056785, 0.71504395770871043, 0.66997553486989136, 0.76934919467061191, 0.62336028214123562, 0.67937894717411473, 0.6455309965049334, 0.63743322420058901, 0.70499042092286557, 0.69329252499120941], [0.67606113096732345, 0.6733669179705879, 0.65785091611914681, 0.67720594215358787, 0.65252315148580065, 0.62785409788679891, 0.66479653502680736, 0.64832412906823922, 0.68425085510974837, 0.66149448177298165], [0.66192358059905054, 0.65281079014517995, 0.66989704017798379, 0.66680704120897272, 0.66280473444224752, 0.65522600800892639, 0.64615472953146302, 0.64521792201273009, 0.63430057544304774, 0.66455560782612677], [0.66856965023830461, 0.64923382859719281, 0.63948317726426585, 0.6462397753995176, 0.61984286562059487, 0.66470345061821356, 0.66616872733653898, 0.66119660795728274, 0.6474319779336426, 0.65243717551373637], [0.65126868305428798, 0.64862676242161932, 0.64482550428571084, 0.63529780146152504, 0.65729008359692909, 0.6640177032271527, 0.66469345918193701, 0.66117255787309714, 0.66668592173844576, 0.65964262765695192], [0.64685678115094714, 0.64996031774326835, 0.64307520943993279, 0.64214916955124524, 0.64642188596421712, 0.65041501801066459, 0.65512767311715703, 0.6472771631348414, 0.65053592154685624, 0.65501917584381775], [0.64820806746633841, 0.64553954941952474, 0.65313592784062702, 0.63201090917274216, 0.6431914285172482, 0.64165996952459492, 0.64454726201667345, 0.64713458253659673, 0.64741043181028479, 0.63256083255809603], [0.64685942977280564, 0.64626660954149118, 0.65189177326697212, 0.63183886444445603, 0.63148927834115842, 0.63719326410484323, 0.64001941957942732, 0.64361551429209729, 0.63711479622947975, 0.63929552341162399], [0.63683072931963636, 0.64831596682883108, 0.63048028572614401, 0.63454262665997585, 0.6355192618497425, 0.62902675854162216, 0.63226009350801371, 0.64226305159485753, 0.63506226931013032, 0.64580758249309644], [0.61818271580921025, 0.63548080755536474, 0.63751451774844969, 0.61655105420784262, 0.62896521730946331, 0.63154935370989362, 0.63120456794507407, 0.63157629315274921, 0.62847431961932143, 0.62411764432179573], [0.6274412796873452, 0.62363006834141277, 0.61747594291412755, 0.62019115110448342, 0.62600200280774043, 0.61772406510876676, 0.6324386657401706, 0.62499439045367133, 0.61082647749657182, 0.61988727168445201], [0.6183355994908557, 0.60715718511738181, 0.6290661918342495, 0.61700802057130455, 0.62475217603644839, 0.60954466243902394, 0.60037982415708369, 0.6134594966324125, 0.61038908964462346, 0.61877817564941917], [0.61614858265267225, 0.61868702312748092, 0.60745046508305645, 0.60981101432714424, 0.61366777569748809, 0.61739012482257749, 0.6119191079670202, 0.60373167607584532, 0.61683384168592992, 0.61232790888670607], [0.60831631737338654, 0.59513917202671207, 0.59974305100177494, 0.60736983240412479, 0.59877730386591466, 0.58730207709230564, 0.60334497236397144, 0.59619744347969228, 0.61069403149734502, 0.60073057051385192], [0.6008558241667773, 0.59214548662438427, 0.58975973551324912, 0.59322633172165917, 0.59619956273955421, 0.59741571014095707, 0.59686649311132978, 0.60630818578395695, 0.5995708313474376, 0.59193482110580042], [0.58111064158339976, 0.58824827971981353, 0.58600107431393877, 0.58406016173113917, 0.59902236594590852, 0.58995109379203703, 0.58247119507014045, 0.5885108034941422, 0.59540836949008258, 0.58580856689151817]]} 
average_performances = {'R^2': [0.4625088995793754, 0.4364195483172357, 0.4275940520228804, 0.421609058744319, 0.4267879175605123, 0.41748037852639336, 0.4108067059425006, 0.4065436891691044, 0.40242139685460837, 0.3901397337694002, 0.38145997108975893, 0.37259685037544205, 0.3699257214005104, 0.35245914481495266, 0.3479835274550112, 0.33554315190559336], 'MSE': [0.088736910897312338, 0.090062096711378506, 0.090328584033253015, 0.09187610764401842, 0.090569042246317927, 0.092674475779174481, 0.09429179767583791, 0.093564193674220281, 0.095019806236751408, 0.096997963762584932, 0.098118557301273168, 0.099785988649988666, 0.10025189391736906, 0.10287270238162838, 0.10383032922469755, 0.10581310126599922], 'Rp': [0.68299513593447303, 0.66237281575610218, 0.65596980293957274, 0.65153072364792908, 0.65535211044976571, 0.64868383155029474, 0.6435398960862726, 0.64055844729843558, 0.63701086258320494, 0.62836164913791648, 0.62206113153387421, 0.61488704215728041, 0.61279675203259198, 0.60076147716190786, 0.59642829822551058, 0.58805925520321201]}
'''