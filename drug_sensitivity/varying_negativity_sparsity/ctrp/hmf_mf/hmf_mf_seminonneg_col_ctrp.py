"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the semi-nonnegative D-MF version with column-wise posterior draws.
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'priorG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'columns',
    'orderSn' : 'individual',
    'orderSm' : 'individual',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_l = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        D = [(R_ctrp,    M_train,   'Cell_lines', alpha_l[0]), 
             (R_gdsc,    M_gdsc,    'Cell_lines', alpha_l[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', alpha_l[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', alpha_l[3])]
        R, C = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Dl(l=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.4246937415607429, 0.5143258464261424, 0.3420485948676213, 0.32039989754490217, 0.30575374998472893, 0.47425489651000563, 0.4966558376475999, 0.36711051363878344, 0.4865193977736687, 0.4885400095243576], [0.4626115269791726, 0.41143719645475907, 0.42714557291440325, 0.4568838599162478, 0.42410949052202795, 0.43637373764223164, 0.45402411243386787, 0.4391851269488919, 0.42881477344543695, 0.42482172047022504], [0.4292450479740123, 0.4289804662296237, 0.39481272218599717, 0.4408567948382883, 0.41179474008047157, 0.41956534889672037, 0.415255617433094, 0.4075712593488373, 0.46111445640119564, 0.4126200594944617], [0.4261895811319957, 0.44087178984527764, 0.38081207047634325, 0.4121134577298492, 0.42682990993096326, 0.38540537537900865, 0.4503502046531619, 0.39374698541717323, 0.4217722301833351, 0.4293625331217459], [0.4352293033722947, 0.4279709443139743, 0.3934843763027035, 0.43094518972977214, 0.3946913180809819, 0.39615626785376046, 0.38696343155775337, 0.39463685583356833, 0.4202119402139658, 0.39072230238158134], [0.39358520585867474, 0.4104476655207804, 0.3867488113259824, 0.3955231775512218, 0.40451980388939135, 0.4068797608643657, 0.4173940557616106, 0.41590820911001614, 0.38541669023787894, 0.408715302282849], [0.392993115743132, 0.3877024261904758, 0.3913724805936045, 0.38449626891142497, 0.3936101657844602, 0.38607686977287436, 0.40957070913957605, 0.3957181325304435, 0.3896685207373568, 0.3941627358875692], [0.3813061661449231, 0.40254248087333244, 0.37082477255503654, 0.39022174035924784, 0.38179971793522594, 0.3784840276195154, 0.3785693884700645, 0.3841930981233308, 0.3846819484991383, 0.39224242183549296], [0.3585698690295055, 0.3902334991154781, 0.37602450799386367, 0.37118412381437804, 0.38949563192059733, 0.38399459741373454, 0.38142031017756794, 0.3802466781567425, 0.3831995805979237, 0.39810481538741005], [0.36960397750074836, 0.3602546078898776, 0.359125054536776, 0.36982288617678727, 0.37686579877725446, 0.3756638586704112, 0.37573696477415575, 0.3632477027648895, 0.38639434821332086, 0.3733562424949499], [0.33869090095238263, 0.36572039935703793, 0.3607024409128716, 0.34652142031412314, 0.33301460801786187, 0.34688564461545746, 0.3620739738704227, 0.33493131644256346, 0.37080171279623797, 0.3709739434742523], [0.3657304611922757, 0.36502899523423793, 0.35919839234617057, 0.3463399418486338, 0.3452731006252384, 0.3445879549427444, 0.35158453761454966, 0.3322918806627503, 0.3323020036721276, 0.32687107324787257], [0.33900146124568964, 0.34477987554402867, 0.3330641852301143, 0.3385239901551206, 0.339177627146255, 0.3179450832235, 0.33972603317717065, 0.33518668540652996, 0.32191410528905673, 0.32356664372942], [0.3004919978403261, 0.3288046008542894, 0.2977031413199476, 0.32871176632680565, 0.31385674430495214, 0.31152762487588215, 0.31150388171676513, 0.34695158791664105, 0.28867953866537066, 0.3270612642742603], [0.3057706180065545, 0.2927238446370939, 0.30082292361705165, 0.2790903136739157, 0.31275321477571727, 0.2971013128241059, 0.3287123651481668, 0.2738193184886937, 0.290362031553571, 0.29747196529566533], [0.2727179377390375, 0.2696354572263868, 0.2793218267778794, 0.29229550293116857, 0.2725438216277828, 0.2861206709233962, 0.2864707824929875, 0.2797716191971562, 0.2488877759810676, 0.2813157974328633]], 'MSE': [[0.095885315730477538, 0.08433545322224717, 0.099956214942605592, 0.10408789805744942, 0.099333136009458714, 0.086873194422614833, 0.0832963457099926, 0.10021283367655527, 0.086788969862118648, 0.07512684978796498], [0.088245095038742546, 0.096775759033548056, 0.093997112059254942, 0.083805656842132203, 0.093269196468680704, 0.086786519652207697, 0.08323555278439447, 0.089467410787933119, 0.095215884495235228, 0.089600942834172512], [0.090627431522951454, 0.091183208767158935, 0.097554047766222021, 0.088127731080365743, 0.096607362633786539, 0.093847656945293872, 0.093408949651303058, 0.093095456843595353, 0.088851946353082606, 0.093901094968016852], [0.094448160306072018, 0.088706373264618929, 0.099131458817177581, 0.093985892009428279, 0.09225866771039315, 0.096692389884428048, 0.087426547561997539, 0.095774697116066898, 0.094605930019038595, 0.093375828121036467], [0.088967315864526747, 0.092932375230472278, 0.098669458331880414, 0.090880018077947239, 0.095271638205810472, 0.097398512248685329, 0.097390374179842906, 0.094174472375973317, 0.093325353183672188, 0.095558993668095393], [0.09406373610350352, 0.09489634947168317, 0.096911341299094261, 0.097009540069619885, 0.095010864415434146, 0.093894285291696397, 0.092221895456213385, 0.091881835771393458, 0.096008681396272888, 0.094207531666737926], [0.094268244387732278, 0.097465055366729544, 0.096812348631869133, 0.098543949494839828, 0.096852071411315063, 0.09713600243355372, 0.093471372163751787, 0.09672779216768114, 0.096881339532428057, 0.096314172976481177], [0.098454807085589208, 0.093657368874682206, 0.10095406328470566, 0.096444889939901732, 0.097838011319801826, 0.099186115164007924, 0.098726416807526765, 0.097523039647534809, 0.097671311190501237, 0.096519170902714765], [0.10212817989508931, 0.096316997103217908, 0.099488352147151835, 0.099670712923598109, 0.096391944184778824, 0.097600403050441403, 0.097340523154152384, 0.099001482057151771, 0.097293698665633213, 0.095655470196297235], [0.10018329797459577, 0.10160515857928966, 0.10197007537464825, 0.10042846667897694, 0.098851117361452551, 0.098780346457291668, 0.099693997274460155, 0.10036977260475553, 0.09813164343583311, 0.1001641370357452], [0.10470761062239273, 0.10092956254577284, 0.1016370907621339, 0.10284819137811124, 0.10561751788979688, 0.10356710281359478, 0.10087922619709203, 0.10573139611720915, 0.10047815831124444, 0.10007538232196396], [0.10111748606749112, 0.10167968564183211, 0.10170643815337765, 0.10302479570788771, 0.10359965142452782, 0.1039626965842516, 0.10391709895246951, 0.1059728268205084, 0.10630414714348069, 0.1068815367866916], [0.1046891535585158, 0.10374481397896367, 0.10627473860651053, 0.10555143496068033, 0.10526255530088564, 0.10862393588280347, 0.1057585947203307, 0.10639720445070107, 0.10832023383269299, 0.10759062548148782], [0.11054759156014941, 0.10678610268231312, 0.11204886166485718, 0.107030041927556, 0.10917967283852954, 0.10905126114915942, 0.10953704225857427, 0.10363441062883001, 0.11232444390409875, 0.10592489359319608], [0.10980760174955756, 0.11224586093637531, 0.11127663230606584, 0.1148216621622824, 0.10868052803839247, 0.11182435302580976, 0.10657155205839, 0.11552644271352815, 0.1126121205867139, 0.11202288935964066], [0.11523304905015992, 0.11615046356589219, 0.1145893192000194, 0.11304369923552321, 0.1152638274415743, 0.11373751167707824, 0.11337220817427876, 0.11408194633602542, 0.11935489202296111, 0.11449746133212252]], 'Rp': [[0.65656548285224214, 0.72030707404725691, 0.60094317194687641, 0.57382646224973866, 0.56426395784592798, 0.68943747060585214, 0.7051725754298398, 0.61196653363041387, 0.69844235120890918, 0.70021823862717791], [0.68170833051657631, 0.64500464940378277, 0.65572136178596507, 0.67708046636960084, 0.65476288818629536, 0.66230806318143864, 0.67483999785765325, 0.66490027438785093, 0.65624240783812215, 0.65569246402348358], [0.65800905091020889, 0.65732321015999584, 0.63350883836248628, 0.66680204604577153, 0.64674297541611347, 0.65176049490976451, 0.65008914814285679, 0.64276105581102083, 0.68018245206315686, 0.64550741186647864], [0.65485265501715617, 0.66568226928994789, 0.6244840032684259, 0.64553040700598197, 0.65581670510778967, 0.62692113610968681, 0.67200322136971158, 0.6316987722691777, 0.65187971701425063, 0.65840688588500862], [0.66101998916648497, 0.65651080144834795, 0.63148851565178876, 0.65900906587435359, 0.63487933876629166, 0.63502835094553378, 0.62891883636575707, 0.63505190164018366, 0.65178140464161505, 0.62939430281764897], [0.63264226470804164, 0.643544738461997, 0.6278728825845562, 0.63394026235237833, 0.64046270088886725, 0.64191392193197661, 0.64845027826200241, 0.64921876311240245, 0.62887111044075228, 0.6423617980907057], [0.63270443626004824, 0.62732274711705971, 0.6310556688714124, 0.62639206109084378, 0.63263970567971239, 0.62708162827844982, 0.64353841822506808, 0.63443274332620181, 0.63006818087245953, 0.6328099274315977], [0.62413321462934823, 0.63800506399341728, 0.61601617391824059, 0.63065692083447622, 0.62404480078577118, 0.6217103312070047, 0.62281337511269153, 0.62614423660754126, 0.62531408188770088, 0.63025401112408053], [0.61058751878260686, 0.62829520301951447, 0.62000142158805926, 0.61438342425161052, 0.62933712436659373, 0.62716998424641557, 0.62512267733436433, 0.6219272211371446, 0.62561752366522994, 0.63598984147139681], [0.61637386600500443, 0.61043050382395725, 0.60924064177956228, 0.61493339469835551, 0.62030589299825323, 0.62109815485912689, 0.61853059342606542, 0.61158221461689577, 0.62751028013169219, 0.61675709987542093], [0.59415233155629077, 0.61120966448822545, 0.61080945101250317, 0.60041917454406324, 0.59321025104713376, 0.59999272645661372, 0.60993260804091409, 0.59069391442242825, 0.61365129278294617, 0.61630690976956581], [0.61047356873755498, 0.61059492564808115, 0.60437111146532652, 0.59932953732972227, 0.59785644858604392, 0.59890445542492432, 0.6023564561794108, 0.59060256302170655, 0.58788096814053326, 0.5894890103186925], [0.59419545976900723, 0.59515680388960746, 0.58835192543639836, 0.59310431920850348, 0.59083496659364743, 0.58076730410932842, 0.59607721474736042, 0.58745184472445222, 0.5818975578405664, 0.58740643446435259], [0.56829218834031225, 0.58849773498421787, 0.56617509051439352, 0.58467364136803202, 0.5781129950302728, 0.57107790034775996, 0.57632895433132669, 0.59848130320972015, 0.56249954375271261, 0.58507904072007944], [0.57169357464841242, 0.56639866498923197, 0.56716967622904835, 0.56084339660874416, 0.57561491151004363, 0.56545084898303266, 0.58369161428947625, 0.55629937029157606, 0.5606788760210073, 0.56177172765449801], [0.55338171781405798, 0.55328699861549013, 0.55603635591949585, 0.56381297166921451, 0.54821980930866676, 0.55722761572114465, 0.56006164720528751, 0.5591148101082215, 0.53411313193679899, 0.55667012806062421]]} 
average_performances = {'R^2': [0.42203024854785526, 0.43654071177272646, 0.42218165128827023, 0.41674541378688545, 0.40710119296403563, 0.4025138682402771, 0.3925371425290917, 0.3844865762415308, 0.3812473613607201, 0.3710071441799171, 0.35303163607532106, 0.3469208341386601, 0.3332885690146885, 0.315529214809524, 0.2978627908020536, 0.27690811923297265], 'MSE': [0.091589621142148497, 0.090039912999630142, 0.092720488653177641, 0.093640594481025768, 0.094456851136690625, 0.094610606094164898, 0.09644723485663817, 0.097697519421696619, 0.098088776337751205, 0.10001780127770488, 0.10264712389593118, 0.10381663632825182, 0.10622132907735719, 0.10860643222072638, 0.1115389642936756, 0.11493243780356351], 'Rp': [0.65211433184442347, 0.66282609035507689, 0.65326866836878539, 0.64872757723371366, 0.64230825073180053, 0.63892787208336799, 0.63180455171528538, 0.62590922101002722, 0.62384319398629351, 0.6166762642214334, 0.60403783241206843, 0.59918590448519959, 0.58952438307832244, 0.57792183925988272, 0.56696126612250697, 0.55419251863590024]}
'''