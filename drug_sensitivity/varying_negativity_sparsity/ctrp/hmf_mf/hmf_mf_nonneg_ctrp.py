"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the nonnegative D-MF version.
"""

import sys, os
project_location = os.path.dirname(__file__)+"/../../../../../"
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'priorG'  : 'exponential',
    'priorSn' : 'exponential',
    'priorSm' : 'exponential',
    'orderF'  : 'columns',
    'orderG'  : 'columns',
    'orderSn' : 'individual',
    'orderSm' : 'individual',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_l = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        D = [(R_ctrp,    M_train,   'Cell_lines', alpha_l[0]), 
             (R_gdsc,    M_gdsc,    'Cell_lines', alpha_l[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', alpha_l[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', alpha_l[3])]
        R, C = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Dl(l=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.4738753059847127, 0.3514540289941549, 0.32910390546788204, 0.3755186141314393, 0.43467892011174347, 0.4374247019345324, 0.38464454876062404, 0.4359195731079335, 0.3699505830321992, 0.5629635666006279], [0.44168889406757694, 0.38368263954638626, 0.3879444605358614, 0.451074159092979, 0.48851551858517084, 0.44722714089524485, 0.428326621643645, 0.44137093855736265, 0.4533236749232187, 0.4647814719282004], [0.400267718682511, 0.45293172661825476, 0.47470893855953045, 0.43952418452875397, 0.3989340748437932, 0.4214764701747723, 0.41842584898355883, 0.444555865805628, 0.42432737075162974, 0.4260276294731504], [0.4202691714535155, 0.44673084592838463, 0.40652201638123275, 0.3932433271422927, 0.45245032694728593, 0.4217353595128561, 0.39413593036190475, 0.4064467686883475, 0.42966788723907756, 0.4271483312615765], [0.42406652260738764, 0.4176728912307279, 0.4447913363913879, 0.42922292195484235, 0.3737901290072525, 0.4113543480638616, 0.41271136653508633, 0.41567506182114944, 0.4365978333283085, 0.4334377452839028], [0.4352474061504251, 0.4181160589545271, 0.41139741487478654, 0.3904704101318027, 0.381904364816831, 0.4283338101558263, 0.41616086295650045, 0.4174048310381778, 0.4189832757842846, 0.42452024634315444], [0.4055239995239618, 0.39664354523275946, 0.3984594213405058, 0.41461933288732666, 0.4134699015106357, 0.3995966929366006, 0.4175774944559484, 0.40861503904748375, 0.41877842281737354, 0.406688182411745], [0.39901504207937144, 0.4156625286278347, 0.4052886010240584, 0.4054727524124099, 0.4071915361476328, 0.3955968455029685, 0.3894790984580083, 0.4043007871165887, 0.41009094877465957, 0.4034044783576971], [0.4036863385306644, 0.3933804435126701, 0.41021306606128716, 0.4091986206338404, 0.40624659419961506, 0.3935472221914076, 0.4078217587221905, 0.4103803654354877, 0.4040559037783559, 0.38586102412087564], [0.39455541617370193, 0.39718288087468034, 0.3823926030522711, 0.3861588807995797, 0.3976133691207545, 0.3904477934265864, 0.3907996169005017, 0.4115386398614428, 0.39408716952780365, 0.3809148446114371], [0.38516508797445326, 0.37224811914292155, 0.3927315943537305, 0.383013327476194, 0.3837420163366543, 0.3926593847171609, 0.3812858155621237, 0.3890008954314752, 0.3958568118572383, 0.38599596969498273], [0.3804669071346857, 0.3646197800768547, 0.38267262433036386, 0.38315611542934624, 0.38561752325122656, 0.3719390940020132, 0.3849075697643166, 0.38117245608335304, 0.3949677818106032, 0.37489498845955593], [0.36204444425845883, 0.3818328721801094, 0.3751325148960911, 0.3607747040368784, 0.35738030269879106, 0.3767758462207216, 0.3703767751081324, 0.3641671352437523, 0.3702813028797124, 0.36652327290968667], [0.3676653047302251, 0.37106152616455246, 0.364801126330063, 0.35112670997499484, 0.3720105354615344, 0.36000450389395, 0.35945098028755673, 0.35576659671983313, 0.3662306449025008, 0.37003054412311254], [0.37214013594297624, 0.34989091933671657, 0.35086107456287974, 0.3496733344061269, 0.34289547058121617, 0.35753481973384504, 0.3556243147478735, 0.34964408590255336, 0.35316373028058845, 0.34812008827747265], [0.344446786040733, 0.35370586609318877, 0.342416887211502, 0.3410738888360607, 0.3352473964622156, 0.33076957516581806, 0.3373218887532602, 0.34290348973495155, 0.3328676818334384, 0.348603639293283]], 'MSE': [[0.093144659706642582, 0.11310176909216423, 0.11108270330890486, 0.088721287805615376, 0.098244204819937966, 0.095702281861698754, 0.092718880661148126, 0.094572596137463397, 0.10003243228211205, 0.064127995964302756], [0.09230079303051443, 0.096203863931138181, 0.099019163669171656, 0.086082683053378628, 0.077993302054889677, 0.086473333831987118, 0.091728830919924439, 0.089760878478827508, 0.087930352422143795, 0.089792373928491556], [0.095093790924046614, 0.088506780770497326, 0.083865186310518508, 0.090214917074484216, 0.096068971370470713, 0.093180094652427159, 0.092823463212959617, 0.087080859555704326, 0.090099080465105105, 0.09486010321560974], [0.093511985581371665, 0.089074234186990758, 0.094115508673699347, 0.095992316221474278, 0.087623998429609412, 0.090966545116710942, 0.09802971276048375, 0.094993304162044004, 0.089761341073548093, 0.090334731308316873], [0.091899310687840283, 0.09279985209558482, 0.088338594694743547, 0.089462778181721936, 0.098906671327090245, 0.093926045338634537, 0.09382194953957107, 0.089405167604523481, 0.090066789329698776, 0.088288372255938496], [0.090091746900663044, 0.090345890695912465, 0.094288802160635871, 0.095426797607472927, 0.098257942560449396, 0.09156077032593464, 0.092394406100549706, 0.093795394432893892, 0.093585444107544102, 0.091091930749756411], [0.09559055417900468, 0.096829003138724001, 0.095592645994859254, 0.09367357385020543, 0.094598599618834947, 0.0953876157381148, 0.092730420579799744, 0.094922063946031407, 0.09101906734170781, 0.096373900290784006], [0.095239422042407373, 0.092751725453233416, 0.094556788717684276, 0.093553692400668034, 0.094367164264756206, 0.097406225350522263, 0.097359166304314085, 0.095212114581323212, 0.094086140301402721, 0.094846494717224519], [0.095486710003328673, 0.096619998742575972, 0.09388346182183202, 0.093826469208550048, 0.094983230712406524, 0.0971320553505374, 0.09310350269780078, 0.094409428071141055, 0.096046708896235164, 0.096777758969357253], [0.096623186732159527, 0.095822523326363776, 0.099368034840913153, 0.097523887627050027, 0.095826358724300065, 0.097348582869601574, 0.096626252665374779, 0.093277680232322011, 0.096556434640387004, 0.098815868134218443], [0.09881980204352972, 0.10066084348705898, 0.096506947934833512, 0.09843972731320319, 0.097872074791980235, 0.097125580228722821, 0.098813209395264862, 0.097519929288483437, 0.095584180135610014, 0.09816014803317627], [0.098308688894716986, 0.10085587135095761, 0.097711562087758219, 0.098052345364339641, 0.097850327868369932, 0.099670842433393442, 0.098103452978230241, 0.098621846289503406, 0.095929701958749475, 0.099524695665217849], [0.10137544009386838, 0.09897666793875963, 0.099881040890637054, 0.10262998150046586, 0.10257110195568878, 0.099067595710273779, 0.10064698161491058, 0.1007305719553121, 0.099997450411996772, 0.10066811306185923], [0.10163772010761556, 0.10001049253833527, 0.10150584347234159, 0.10290321600678154, 0.10019293351881256, 0.10187427004559307, 0.1016415793467056, 0.10287862804655491, 0.10051521653260569, 0.099765441730851501], [0.099773634607766573, 0.1034844846833822, 0.10363494016352821, 0.10302766873731686, 0.10497319140155879, 0.10215699504850533, 0.10242245879835767, 0.10345352392135135, 0.10320749273382485, 0.10396270676006278], [0.10432687667798402, 0.10287835727557301, 0.10452491479999934, 0.10443005045656401, 0.10554718075646459, 0.10644136604408062, 0.10529858255931886, 0.1044269420960509, 0.10616515114083523, 0.1036341707249593]], 'Rp': [[0.69753524023029545, 0.59577296502140609, 0.58867701662199934, 0.61890405494212697, 0.66130224216727163, 0.66209640327175556, 0.62245398479013991, 0.66257998916719807, 0.61632899779225936, 0.76179176696734741], [0.66520273796587837, 0.62136106683461978, 0.62328964312492541, 0.67178321510127781, 0.70047824764892197, 0.66885905516211663, 0.65447349711450553, 0.66507573156309563, 0.67425743247495151, 0.68289189544992768], [0.63540719873296903, 0.67364031161688542, 0.69024510272651918, 0.66327554439767689, 0.63214036573011134, 0.64926608151822252, 0.64760012647118992, 0.66838018265777621, 0.65229477429924643, 0.65272895616811821], [0.64843662688665626, 0.66861048174512139, 0.63945152042298503, 0.62773612713727711, 0.67312125698788539, 0.65000565257173426, 0.62839846861698156, 0.63798351696546263, 0.65645152425270736, 0.65445104133296761], [0.65193671862568137, 0.64695772780513638, 0.66729378637907111, 0.65623939552695121, 0.61479927445913896, 0.64158548751206201, 0.64262485845660611, 0.64565635811762234, 0.66079639134912171, 0.65938853997037428], [0.65976478022026797, 0.64735989654475823, 0.64170509153711708, 0.62578694993327544, 0.62034070698540122, 0.65507622636328366, 0.64543930678534911, 0.64696110182525179, 0.64735838861312267, 0.65299297863789574], [0.63715707633164698, 0.63053947984318615, 0.63167574036349816, 0.64470806043273843, 0.6431242933849598, 0.63292039737367689, 0.64710216341468918, 0.63925445516829416, 0.64805596485229344, 0.63815047946835224], [0.63221689641868561, 0.6449182371049007, 0.63725092272827588, 0.63725456593516305, 0.63845219707532141, 0.6292692922372739, 0.62505449990560902, 0.63631962645013351, 0.64095745551020589, 0.63657897842063915], [0.63546150737755758, 0.62737938832986706, 0.64055222564511483, 0.6412030028315705, 0.63842405846230754, 0.62776964195368923, 0.63977863774114463, 0.64114931280099907, 0.63596497410749508, 0.62210374365175114], [0.62838454822766332, 0.63075790010258426, 0.61854433421240906, 0.6221993291371215, 0.63173787375279189, 0.62527382466064929, 0.62684567554927051, 0.64230332819044522, 0.62795634109748288, 0.61766088228196558], [0.6207601495098497, 0.61089263332360921, 0.62714670688876728, 0.61894345412251839, 0.6205915574630696, 0.62728984868301119, 0.61816642850121029, 0.62385066121145627, 0.63002533495085333, 0.62143687159530214], [0.61704832114046959, 0.60464356683686749, 0.62007553781489777, 0.61966172660630447, 0.62212521214218419, 0.61113486539253614, 0.62089649585926776, 0.61797099813226641, 0.62935456243203591, 0.61346650873941078], [0.60305483781798974, 0.61843044702034533, 0.61322815520410523, 0.60154408603061393, 0.59837498943933409, 0.61479044674266914, 0.60906062196890276, 0.60571158495712063, 0.60882496416318066, 0.60612002695923017], [0.60660851468425203, 0.6093345976749428, 0.60408952031613938, 0.59424940928890857, 0.61012960433142061, 0.60265613142172703, 0.60045021541880284, 0.59677327801121316, 0.60536783843932584, 0.60999695947774224], [0.611677095745913, 0.59160929706327126, 0.59263404663958152, 0.59359339277437762, 0.58585337071074906, 0.59818603301126305, 0.59656512405632045, 0.59322911473867967, 0.5949842709773423, 0.59113699862272384], [0.58785677886091781, 0.59481380607839152, 0.58569122100015125, 0.58657848663705714, 0.58157796079446389, 0.57658242894419776, 0.5818779769426532, 0.58831969426971098, 0.57781006782952338, 0.59137153854909219]]} 
average_performances = {'R^2': [0.4155533748125849, 0.43879355197756453, 0.43011798284215824, 0.4198349964916474, 0.4199320156223907, 0.41425386812063164, 0.407997203216434, 0.403550261850123, 0.4024391337186394, 0.39256912143487593, 0.38616990225469344, 0.38044148403423195, 0.36852891704323343, 0.36381484725883234, 0.3529547973772248, 0.3409357099424451], 'MSE': [0.095144881163998996, 0.089728557532046699, 0.091179324755182339, 0.092440367751424918, 0.091691553105534715, 0.093083912564181234, 0.094671744467806601, 0.094937893413353597, 0.095226932447376483, 0.096778880979269011, 0.097950244265186309, 0.098462933489123688, 0.10065449451337723, 0.10129253413461974, 0.10300970968556547, 0.10476735925318299], 'Rp': [0.64874426609717994, 0.662767252244022, 0.65649786443187141, 0.64846462169197794, 0.64872785382017661, 0.64427854274457219, 0.63926881106333355, 0.63582726717862081, 0.63497864929014958, 0.62716640372123833, 0.62191036462496474, 0.61763777950962395, 0.60791401603034922, 0.60396560690644752, 0.59494687443402217, 0.58524799599061594]}
'''