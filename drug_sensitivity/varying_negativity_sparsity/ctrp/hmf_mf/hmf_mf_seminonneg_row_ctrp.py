"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the semi-nonnegative D-MF version with row-wise posterior draws.
"""

import sys, os
project_location = os.path.dirname(__file__)+"/../../../../../"
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'priorG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'rows',
    'orderSn' : 'rows',
    'orderSm' : 'rows',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_l = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        D = [(R_ctrp,    M_train,   'Cell_lines', alpha_l[0]), 
             (R_gdsc,    M_gdsc,    'Cell_lines', alpha_l[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', alpha_l[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', alpha_l[3])]
        R, C = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Dl(l=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.3411751317914449, 0.40567595284378644, 0.3901489641869976, 0.44075994685112607, 0.3133090050600841, 0.3896957927880351, 0.3384144050271115, 0.3867804215461126, 0.4180116525668943, 0.3769281771209858], [0.4171815859888939, 0.4228419937012262, 0.3763674411881516, 0.43305564978198696, 0.4272722734595158, 0.43540702259780295, 0.4456050442065441, 0.4101034768369324, 0.4395132560241437, 0.4240043535265211], [0.4242741418536813, 0.4293634722148082, 0.46142087762947404, 0.4044745980361616, 0.4016860208746247, 0.4521583556986335, 0.43573626646338925, 0.46868155851971605, 0.3974429113805831, 0.4232656306789042], [0.42097460611266646, 0.41524170043819264, 0.42566606125318707, 0.41522375027968494, 0.42420337014132903, 0.3822069131348592, 0.43346809007624776, 0.4151546617775491, 0.38462279381001596, 0.4204712713791878], [0.40985890312902074, 0.4432190806104247, 0.4049336503762382, 0.4135831517140144, 0.41738925731078524, 0.40086679644056755, 0.41501076532229686, 0.43731080799521604, 0.422992311866754, 0.4262034829421977], [0.4245177655261564, 0.3753384940690403, 0.4197854978354313, 0.4006677232643139, 0.40206810656306247, 0.41094168048540025, 0.38764971889256794, 0.42709093948635735, 0.41950521590538536, 0.43260146110018294], [0.39747572293525624, 0.39364583972398204, 0.39798114614148283, 0.4027703018699569, 0.40328782347976777, 0.3943277173455757, 0.3785445823093794, 0.3872850118492984, 0.4032484566809281, 0.40179956521688587], [0.39713865329033393, 0.3792049819277462, 0.431810538456714, 0.40458600052184024, 0.3989345154779447, 0.39885898258011176, 0.3656181758383098, 0.389512768579065, 0.4006080296662575, 0.41657950760446494], [0.39471773617349903, 0.36131529666870177, 0.39052393268598207, 0.37165247523879263, 0.3960900513793836, 0.3738616884577637, 0.3788573521725489, 0.39202453860599085, 0.39265235493712847, 0.37799130785181656], [0.37088641644237497, 0.3695624604391322, 0.37848924197722467, 0.36595145424605935, 0.3677757663145529, 0.37480041103513784, 0.36352449158895594, 0.37910485964348384, 0.3771259717605808, 0.3813226671455049], [0.3486602886372807, 0.36883271580068977, 0.3709189292009426, 0.3596672390008958, 0.3543636318210952, 0.34876149133722056, 0.3684631545308453, 0.3630140767822263, 0.34746634817998323, 0.3469323684579976], [0.3436428292186001, 0.35761226826677395, 0.34673678885902126, 0.3605171900607994, 0.37070614703990246, 0.34333817334585703, 0.3454303846472031, 0.37918852481997045, 0.35998613972631033, 0.35759104615889437], [0.3452603341076882, 0.33867022166277216, 0.3552071439842863, 0.36557151152387535, 0.33848291103245876, 0.34253183061789505, 0.3344177582254938, 0.35441091761048704, 0.33950461431736734, 0.3375923411910603], [0.3257103080737993, 0.31734158570580995, 0.32530614234712163, 0.31875685161738165, 0.31801922887318756, 0.32680080931539957, 0.3333072716422837, 0.3455570930395362, 0.31735470618003914, 0.33465251349974234], [0.2990713773965049, 0.30092702304976426, 0.3238612118672596, 0.34113151734823544, 0.2980275923744746, 0.30751773921317604, 0.30521681539104706, 0.3212191849477585, 0.32634086398189754, 0.2900847498965766], [0.27939069682087736, 0.30576262445918845, 0.27263776797865336, 0.2714442642653797, 0.28997050426006754, 0.2800422509877304, 0.2768461055348328, 0.2856879699669419, 0.29134810272887157, 0.2995156051042417]], 'MSE': [[0.10648256305581669, 0.090701796722206657, 0.09975160369733517, 0.084466474502489702, 0.10965913258857246, 0.098491935224704383, 0.10593095429938182, 0.088234927742450953, 0.10200339629963366, 0.093632530709552839], [0.089865592030864777, 0.091371547930383365, 0.097649814418652517, 0.091909353251892742, 0.08968267955753996, 0.090990993487764946, 0.087034249151698453, 0.09124007407476567, 0.088057619683342511, 0.092673520264681439], [0.091368627251847634, 0.089618110870095385, 0.086439188764616079, 0.096482693587122859, 0.095558779116684395, 0.089931744173995048, 0.089440370542162168, 0.08654929645076341, 0.096803875631681163, 0.093192233717170503], [0.090288313376679419, 0.093887549283558788, 0.090121478460446894, 0.095221237910347201, 0.089768647918196304, 0.097640819731567019, 0.089900155771185708, 0.091651658573429648, 0.097880172424262529, 0.091624838192356284], [0.095137027655748482, 0.089191797991334351, 0.09405162076311499, 0.093290756712985853, 0.091698496402854102, 0.09364398950620334, 0.094275595961040903, 0.091677747448288188, 0.090723355932891367, 0.091578366513465903], [0.091061785503925227, 0.099891841793725636, 0.092478073585530562, 0.096804752898493746, 0.094516890110659738, 0.092844091331660217, 0.098088843796990177, 0.091445086460623007, 0.093363021646565625, 0.091590851263846848], [0.09590230895813856, 0.097831256536346001, 0.096940315059382387, 0.09448182951321514, 0.095086078199012325, 0.096320451198408874, 0.10007018297159338, 0.097664004340260638, 0.094446052222806651, 0.094594371871946414], [0.095770270266774454, 0.098400316170701579, 0.090674371751808022, 0.096072361939071413, 0.094954279173598943, 0.095653653234490307, 0.098630273251918824, 0.097727598865908885, 0.094421230019148039, 0.092181173135789857], [0.095087638697350041, 0.1008607310324163, 0.097528330857733797, 0.09944625996637918, 0.09570473493716046, 0.098980413978836113, 0.097931951450592608, 0.096008222257325498, 0.098301633415599041, 0.099515406750318003], [0.10015156606507326, 0.1010073526014983, 0.099642210079410043, 0.10156421253722728, 0.10091049790716589, 0.099481920273172583, 0.1008463816624641, 0.09882106658432567, 0.099016655639935974, 0.099034964742843595], [0.10359489860521563, 0.10061007951624565, 0.10025732251447639, 0.10218170837326074, 0.10295318110334518, 0.10366727006262706, 0.099860547078651538, 0.10121734878409255, 0.10353614623490623, 0.10374812843590288], [0.10417523877524629, 0.10194909288692527, 0.10426264796238734, 0.10193998775998665, 0.10121745338392515, 0.10474517019881086, 0.10406644072049846, 0.098876112075365549, 0.10196001267511676, 0.10261123404269719], [0.10436204180497433, 0.10499015904833144, 0.1028705622013466, 0.10093842148948823, 0.1041411479636318, 0.10441309999043591, 0.1064590297163794, 0.10343370698513236, 0.1048062847848432, 0.10501851459096724], [0.10681495509288849, 0.10835446996993224, 0.10731078197816014, 0.10859778539652036, 0.10845584207989499, 0.1066987651756838, 0.10604995673932993, 0.10429957289717325, 0.10867428063518832, 0.10615458037142292], [0.11160153232111657, 0.11100363514912122, 0.1076203098982528, 0.10510630642886842, 0.11129133256794629, 0.11037838355400559, 0.11063252333809837, 0.10805821814741928, 0.10721933880534228, 0.11260255736167518], [0.11398439611756107, 0.11077054252028838, 0.11563456432688483, 0.11613858166096877, 0.11291827960395158, 0.11403227087704168, 0.1147492061636201, 0.11351080375011628, 0.11294868201822211, 0.11122992060961652]], 'Rp': [[0.60546840814098579, 0.64776250232499533, 0.63380861693924873, 0.66607711097904254, 0.57911802374341681, 0.62969386375643988, 0.60152067037026735, 0.62388958990865906, 0.65017067219466185, 0.62099600308413438], [0.64950013325620715, 0.65301014364481347, 0.61877332488170234, 0.66019647728807918, 0.65764413505896924, 0.66176837679376388, 0.66995620916575593, 0.64864091386632927, 0.66447075451298221, 0.653334464831128], [0.65427821689326082, 0.65718771263997, 0.6803736898296906, 0.64073370859399248, 0.63849406078435578, 0.67345580401124505, 0.66200202105110861, 0.68537095951966276, 0.63606917850831868, 0.65411181048084965], [0.65305761159158615, 0.64738520329703619, 0.65511240894654177, 0.64973277095398352, 0.6539912519822958, 0.62588222768209145, 0.66037249269487064, 0.64740669275794138, 0.62509854054468084, 0.65159940024496077], [0.64297054885814153, 0.66689458223132614, 0.64161636578330206, 0.64746888706322714, 0.64893593891201307, 0.63833004059082055, 0.64819938922612985, 0.66298234097877262, 0.65245547969446605, 0.65537278753730277], [0.65305008358436301, 0.62042962953831859, 0.65090658238965382, 0.63875743515640815, 0.63837351954610444, 0.64617792605716595, 0.62639327909230891, 0.65568856278943422, 0.65062319847379635, 0.65911777822727935], [0.63459150461067226, 0.63257079686194451, 0.63502574697360881, 0.6391347449102337, 0.63870229355754782, 0.63493702690120801, 0.62210655787454006, 0.62865858003565001, 0.63841744075557083, 0.63816935067001657], [0.63552561618832815, 0.6219645766928803, 0.65826019753744813, 0.63916246409538913, 0.63693763434059469, 0.63559849982388794, 0.61512226118857594, 0.62854207740457746, 0.63862249673271509, 0.64868895616007549], [0.63296218457573483, 0.61261757563632124, 0.62918619218795024, 0.61746137630633502, 0.63269623164455091, 0.61954640240593151, 0.62197006028789548, 0.62918580297499038, 0.6327404117394354, 0.6205177356745929], [0.61543326788232211, 0.61559847557939606, 0.62118089774690854, 0.61320606133923672, 0.61241398534068703, 0.61665290392473526, 0.61141950541606671, 0.62245234528662341, 0.62031463134028364, 0.62184472298961724], [0.60167626668987828, 0.61569154409374771, 0.61561944672151414, 0.60723271668000323, 0.6059706134002355, 0.60194320723271555, 0.61271402854380852, 0.60950224729836888, 0.60154305818225196, 0.60133419906942842], [0.59506576651710275, 0.60624696653130461, 0.59677660874396132, 0.60980219166192906, 0.61346225655335351, 0.59651819727347899, 0.59738596645821151, 0.62071096343827692, 0.6065256763171184, 0.6063447819798703], [0.59590960556039685, 0.59453478756954925, 0.60109286681303453, 0.60887862909212576, 0.59369914285168268, 0.59472589805541476, 0.58776681673027864, 0.60182068223478125, 0.59349442148278964, 0.59309420817494429], [0.58427579721563117, 0.57547130525132051, 0.58233313896014982, 0.57943670120515545, 0.5777799517126182, 0.58754282931395418, 0.58922912891065637, 0.59799763401002337, 0.57730648612495283, 0.5880855113621718], [0.5658405176431387, 0.566808349380993, 0.57958950117795172, 0.59229503856558929, 0.56129321356397577, 0.57142545011173906, 0.5701343260239089, 0.57766603775575842, 0.58134597980896818, 0.56819470023314456], [0.55651881638124356, 0.56671767609266033, 0.54706621060020477, 0.54946086199661304, 0.55329070218076482, 0.55681185900858665, 0.55717514726216688, 0.56126451666463428, 0.56232699275374909, 0.56333759785546278]]} 
average_performances = {'R^2': [0.3800899449782578, 0.4231352097311719, 0.4298503833349976, 0.413723321840292, 0.4191368207707515, 0.4100166603127898, 0.39603661675525126, 0.39828521539427875, 0.3829686734171608, 0.3728543740593007, 0.3577080243749177, 0.3564749492143332, 0.3451649584273384, 0.3262806510294301, 0.31133980754666946, 0.2852645892106785], 'MSE': [0.097935531484214425, 0.091047544385158635, 0.091538492010613856, 0.092798487164202983, 0.092526875488792751, 0.094208523839202057, 0.096333685087111057, 0.095448552780921042, 0.097936532334371121, 0.10004768280931167, 0.10216266307087241, 0.10258033904809596, 0.10414329685755305, 0.10714109903361946, 0.10955141375718462, 0.11359172476482712], 'Rp': [0.62585054614418512, 0.65372949332997321, 0.65820771623124541, 0.64696386006959883, 0.65052263608755012, 0.6439517994854832, 0.63423140431509939, 0.63584247801644722, 0.62488839734337376, 0.61705167968458763, 0.60732273279119531, 0.60488393754746073, 0.59650170585649986, 0.58394584840666341, 0.57345931142651674, 0.55739703807960861]}
'''