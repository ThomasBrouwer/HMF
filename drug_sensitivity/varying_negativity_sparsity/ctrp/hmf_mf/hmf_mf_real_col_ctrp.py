"""
Test the performance of HMF for recovering the CTRP dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
This is the real-valued D-MF version with column-wise posterior draws.
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'normal',
    'priorG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'columns',
    'orderSn' : 'individual',
    'orderSm' : 'individual',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_l = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_ctrp,     M_ctrp,   cell_lines, drugs   = load_data_without_empty(location_data+"ctrp_ec50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_gdsc,     M_gdsc                        = load_data_filter(location_data+"gdsc_ic50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 10000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_ctrp,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        D = [(R_ctrp,    M_train,   'Cell_lines', alpha_l[0]), 
             (R_gdsc,    M_gdsc,    'Cell_lines', alpha_l[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', alpha_l[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', alpha_l[3])]
        R, C = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Dl(l=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.4537084771022767, 0.5501674708479505, 0.4595218242797706, 0.38665366431542314, 0.368034665763581, 0.42746217836436606, 0.3746998875217641, 0.35338429634951807, 0.46758185230248195, 0.45148000271182587], [0.41503453644520116, 0.4310756158069985, 0.438467470571415, 0.46375091028879956, 0.44419675742241527, 0.47752583777221835, 0.42842792702786114, 0.3834633628815526, 0.4128953899819715, 0.4780233597991175], [0.3887138272570957, 0.4430533510078771, 0.4348616938416462, 0.39306558319315155, 0.40790461889577234, 0.425839723540565, 0.45021503451700007, 0.4382707901906667, 0.424427755169269, 0.4296010664512008], [0.44507211060897545, 0.4331098832738557, 0.41823354460748896, 0.4271291758880357, 0.4075524374972753, 0.4210159680027221, 0.41298483037525024, 0.38750355922852, 0.4303798512749677, 0.3805838476936484], [0.4063647537742089, 0.3957058067336864, 0.42733926047758686, 0.4087336262525467, 0.40551020275660077, 0.41223746435881214, 0.39618370925161817, 0.425774577129589, 0.39020062421324353, 0.42346302080640574], [0.39750043514535727, 0.4172165373485428, 0.3971612065609721, 0.39376562870850873, 0.40332124737166963, 0.3930731406059885, 0.4241177810724488, 0.40933235213637187, 0.40880619185525646, 0.40239539232220556], [0.40194029665195685, 0.4184205981840393, 0.4280076567702721, 0.388292940359239, 0.4101307044633298, 0.4270818160825093, 0.3873260040215323, 0.3829509526608401, 0.40576237085061373, 0.40885413754554045], [0.39902956973767034, 0.37092750068440605, 0.37910224359459976, 0.3893602733335524, 0.4035431233669011, 0.3942638967154992, 0.38227853372263854, 0.397027171633187, 0.39991354436507387, 0.3991515840599561], [0.38429946948795557, 0.3821837102650443, 0.3719993746691299, 0.37468865067366164, 0.3644327958036472, 0.38697119707624716, 0.39298823594855525, 0.3761272997572902, 0.38322631042149047, 0.38662975096979535], [0.3762557549023853, 0.38475452130322496, 0.36611807591076295, 0.3833498483454014, 0.3907252690861084, 0.35933716280643335, 0.39579769396127495, 0.4041566764277016, 0.37019506841450156, 0.36738825036359546], [0.36124646757769596, 0.36670080733666055, 0.3557195284443596, 0.38648338978407304, 0.3763253224242856, 0.3607371697380375, 0.36420000185182955, 0.3630890823072854, 0.3574507705514641, 0.36728631602112116], [0.3045672358514343, 0.3570616802388298, 0.34593222028821247, 0.34289050304545043, 0.3547076082858366, 0.38145002192309607, 0.37036132023396684, 0.35929352071307485, 0.3515560736732031, 0.362762148389541], [0.35617818412182933, 0.3253778287184833, 0.33913203340119524, 0.3309519468474865, 0.3327936801419523, 0.3559322263250384, 0.3424720202559216, 0.3519221611102431, 0.3426388807483064, 0.3468714705222258], [0.3157853838392566, 0.3436063498086277, 0.3405499610176699, 0.3097045758761495, 0.3437471043631094, 0.34349459855433706, 0.34382888078700646, 0.31198886373257273, 0.36457838754531735, 0.3261262028792091], [0.32078364038677976, 0.2699476137000876, 0.3439611410666319, 0.32194823556915464, 0.333508813406614, 0.3200422781508979, 0.2869341767748669, 0.30233056478333475, 0.267779011788305, 0.2494341359261727], [0.22616787049084597, 0.3080153389250143, 0.3159485197274793, 0.3020624376451069, 0.21926899569649827, 0.29910172062161944, 0.2883256366486048, 0.2862603765795301, 0.2893596087646624, 0.2743321554282996]], 'MSE': [[0.089015571856928821, 0.075299661007037763, 0.087599660980827887, 0.11437306991560255, 0.10564666307308242, 0.08545289129719652, 0.10233245567820919, 0.11636537787855905, 0.080288479404942423, 0.092449792700097122], [0.096306574681148324, 0.089819715504874956, 0.088206794379782794, 0.086618791151292437, 0.087111963108578799, 0.083821536422046913, 0.091219657941234641, 0.098435016564457384, 0.092862617517886131, 0.083214291074147295], [0.096809400358228104, 0.088489861878548542, 0.089848527892629967, 0.096243982318765853, 0.091553585110029798, 0.093652104843033546, 0.090162207691380628, 0.092198055082299571, 0.090885495626551016, 0.09212678230690674], [0.089581744776552993, 0.091331386078500804, 0.093668326822457126, 0.091709852714950885, 0.093859048029542286, 0.093757814725282954, 0.092167031915798975, 0.099248507133378253, 0.091481514297189037, 0.096158405114833548], [0.094855119390959503, 0.095546657938646556, 0.091984569278967906, 0.094321569041674116, 0.094721139126096268, 0.092526657733595016, 0.094142781584280091, 0.091935679954575134, 0.096118007541679137, 0.093258156012280796], [0.095602793112275583, 0.094792612636997661, 0.096031887489578735, 0.096312904819921746, 0.093711871166773722, 0.095758496462965331, 0.089754362521242068, 0.093068265911626258, 0.093094261248005378, 0.09393025461265174], [0.095090315626932931, 0.09384623100442091, 0.090631601458741592, 0.096705904822693409, 0.094982028329351945, 0.090191121044233838, 0.099593606110730135, 0.098475479684789063, 0.094378238453085267, 0.094034607025127601], [0.095657413066879929, 0.10032257492001465, 0.097792018493725721, 0.095797905982404646, 0.094373173249042597, 0.095737503205470184, 0.099834772254269594, 0.096694322199667851, 0.095526795626017597, 0.095686407371797205], [0.097414211363743411, 0.098690669962407551, 0.10090025175282677, 0.09907561943168508, 0.10217511364239204, 0.098109673236327841, 0.096480929469484458, 0.0989092465154124, 0.098616421299604365, 0.096790644834660211], [0.1006037738103468, 0.098074876312861048, 0.1008974765023935, 0.099003482959206246, 0.097166090886609185, 0.1027540781107176, 0.09735623089124916, 0.094293815107956772, 0.099547360938613869, 0.10019227711421981], [0.10096385021454918, 0.10176274629965661, 0.10302136726238854, 0.098318140067395254, 0.099185596781651175, 0.10047259037533342, 0.10129232674242861, 0.10107241039034327, 0.10227132853453234, 0.10097398352146154], [0.11035167362897773, 0.10256821633261225, 0.10401142451793721, 0.10479031400931609, 0.10282063790813036, 0.098169931316574227, 0.10011909163799658, 0.10150100572253172, 0.10335764804779764, 0.10141901871530007], [0.10241333547925574, 0.10780342234953959, 0.10491880818769175, 0.10635454636291726, 0.10592856451979218, 0.10271171174675001, 0.10440812657599033, 0.10224148354334761, 0.10323625180469331, 0.10369800029827186], [0.10941112841310774, 0.10410678477801061, 0.10491662374144342, 0.10932369922354697, 0.10516381792804207, 0.10427570981133492, 0.10409835572342235, 0.10899664763087925, 0.10110814492286155, 0.10677318498416802], [0.10849320492627247, 0.11603078143513666, 0.10475431974409614, 0.10777437136999422, 0.10559342733066468, 0.10838344719998926, 0.11346983620816882, 0.11024649144806814, 0.11614086511723908, 0.11950540980414671], [0.12318741583600389, 0.110456064329037, 0.10861012304646356, 0.11118790865750983, 0.1237576488373512, 0.11161404277040285, 0.11336521938214919, 0.11343829033588297, 0.11272437360165671, 0.11527722672760345]], 'Rp': [[0.67418699401967475, 0.74185152749044025, 0.67835498270196282, 0.63261752255774262, 0.6124055485553348, 0.66112365509562587, 0.61915387736553351, 0.61634180497301483, 0.68756580720624161, 0.6723796061909646], [0.64781143208539005, 0.65767969210061361, 0.66413343755668142, 0.68176711506772536, 0.66816065542524916, 0.69115897111946722, 0.658335287486285, 0.62758489438826248, 0.64561354738146615, 0.69207957384538099], [0.62963044937692969, 0.66667671487782032, 0.66167278367394911, 0.63363532247665733, 0.64318443786760815, 0.65501376033763747, 0.67271471554289397, 0.66462438081271102, 0.65414965122976965, 0.65782297758467523], [0.66849433755219412, 0.65997621181928068, 0.64930123499643178, 0.65686862655858302, 0.6445901317379733, 0.65300920994765699, 0.64625369573766278, 0.62840806749283729, 0.65931337524342981, 0.62352437943514127], [0.64114963186625584, 0.63457363390190735, 0.65571870946577071, 0.64316227153164685, 0.63971031750100549, 0.64499564198495851, 0.63646892594413107, 0.65542229650358752, 0.63206141194453103, 0.65411186956940481], [0.63472237826257605, 0.64756894684720256, 0.63356280361638817, 0.63290349568737836, 0.63800364142226695, 0.63258567215655215, 0.65592471428669952, 0.64307754064527645, 0.64337347368382392, 0.63793751427000611], [0.63824343154127061, 0.648940013464396, 0.65539783481334024, 0.63024704758737393, 0.64364959463285942, 0.65586164096371269, 0.62708307725323464, 0.62658825010138952, 0.64107754774438064, 0.64141614982033457], [0.63516977303665711, 0.61596554697468042, 0.62322171986489383, 0.63014424241644418, 0.64052185539549966, 0.63246717835993382, 0.62410254556643818, 0.63524026030653702, 0.63558161984373795, 0.63594248921886776], [0.62515427732652851, 0.6219275002703859, 0.61657916409936508, 0.61957356130276986, 0.61313824281533724, 0.62555218978324412, 0.63018584312602854, 0.61973551519282355, 0.62527904712720306, 0.62702199599270259], [0.62114507857796986, 0.62415246493386767, 0.61247956392794622, 0.62330607444594088, 0.63078735971011468, 0.60898923622650691, 0.63220177302671521, 0.63837557156225688, 0.61627118352201216, 0.61355788417175272], [0.60851612382009834, 0.61076865089462284, 0.60580516692053554, 0.6242779705927729, 0.61910651032938413, 0.60914502574649454, 0.6082945969884288, 0.60930876097159337, 0.60661415297086729, 0.61333269084811137], [0.57522471615807269, 0.6059612947386771, 0.59755188184333252, 0.59702487599374399, 0.60458562269301774, 0.62287567751906225, 0.61380408428064259, 0.60608208207187497, 0.60067753786460831, 0.60939598465560474], [0.60370708111422022, 0.58389881709385671, 0.5946827736687651, 0.58733422204841568, 0.59107106342472504, 0.60324251305827314, 0.59640937423295493, 0.60504605238720555, 0.59546566721197525, 0.60008979733798939], [0.57608951951206888, 0.5955801623835193, 0.59406546851191233, 0.57827606029186818, 0.59451523639375736, 0.59333536321868829, 0.59743158459860735, 0.57877267962307555, 0.60832944754720941, 0.58308690681097208], [0.58159085023882151, 0.54997984644540354, 0.59259380743898926, 0.58191421511636943, 0.58748219380583167, 0.57874626623663195, 0.56014727102206552, 0.57231498803444458, 0.55451336728281497, 0.53380152179980866], [0.52172103312367735, 0.56868501432574026, 0.57187019717437526, 0.5668419559881106, 0.53063575242286454, 0.56730147272660614, 0.55833431502039332, 0.56406684784617944, 0.56176201919979674, 0.5482223817796481]]} 
average_performances = {'R^2': [0.4292694319558958, 0.43728611679975504, 0.42359534440642443, 0.41635652084507396, 0.4091513045754298, 0.4046689913127321, 0.4058767477589873, 0.3914597441213484, 0.38035467950728175, 0.37980783215213904, 0.3659238856036813, 0.35305823326426455, 0.34242704321926815, 0.3343410308403255, 0.3016669611552845, 0.2808842660527661], 'MSE': [0.094882362379248381, 0.089761695834544991, 0.092197000310837371, 0.093296363160848689, 0.093941033760275447, 0.094205770998203806, 0.094792913356010672, 0.096742288636929005, 0.098716278150854417, 0.098988946263417393, 0.10093343401897399, 0.1029108961837174, 0.10437142508682495, 0.1058174097156817, 0.11103921545837762, 0.11436183135240605], 'Rp': [0.65959813261565359, 0.66343246064565209, 0.65391251937806527, 0.64897392705211909, 0.64373747102131984, 0.63996601808781706, 0.64085045879222924, 0.63083572309836911, 0.62241473370363898, 0.62212661901050836, 0.611516965008291, 0.60331837578186376, 0.59609473615783803, 0.58994824288916781, 0.56930843274211806, 0.55594409896073915]}
'''