"""
Test the performance of HMF for recovering the GDSC dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.

GDSC has 0.7356934001670844 observed entries
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 500, 450, 2
settings = {
    'priorF'  : 'exponential',
    'orderG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'rows',
    'orderSn' : 'rows',
    'orderSm' : 'rows',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_n = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_gdsc,     M_gdsc,   cell_lines, drugs   = load_data_without_empty(location_data+"gdsc_ic50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_ctrp,     M_ctrp                        = load_data_filter(location_data+"ctrp_ec50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


''' Seed all of the methods the same '''
numpy.random.seed(0)
random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 1000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_gdsc,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        R = [(R_gdsc,    M_train,   'Cell_lines', 'Drugs', alpha_n[0]), 
             (R_ctrp,    M_ctrp,    'Cell_lines', 'Drugs', alpha_n[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', 'Drugs', alpha_n[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', 'Drugs', alpha_n[3])]
        C, D = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Rn(n=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
200 iterations
repeats=10 
fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.6123144865842867, 0.6125188293386558, 0.6234420861379597, 0.5897001480892428, 0.5657820540915737, 0.642063540936501, 0.5992776161373643, 0.5731961796458944, 0.5900610439307158, 0.6130150471233395], [0.5822176635672656, 0.5762035828863449, 0.6128619826279479, 0.6012243686712244, 0.6075750865441238, 0.5934297913584454, 0.6257330876121867, 0.6285518636565669, 0.6110447259028822, 0.6336228874115334], [0.606256758027161, 0.6107986035987734, 0.6053196283112867, 0.6169323559664224, 0.5978730833609667, 0.5969008596108992, 0.6096064566854381, 0.5880589260302564, 0.6016033532102711, 0.5841875810707443], [0.5731194697102961, 0.5962476956863648, 0.5948496769170497, 0.6018046038017162, 0.6043276362071539, 0.5865892878976798, 0.571845835634052, 0.6059872565353512, 0.5995962314322325, 0.5880918938304296], [0.6032308851241087, 0.570105970493081, 0.5809474017870717, 0.594430790509267, 0.5868971615080747, 0.5783369800523106, 0.5850779258679574, 0.5908337695813846, 0.6225963978238405, 0.6002252930901983], [0.5892235903304789, 0.5907793845223979, 0.5707115315928675, 0.589761097073096, 0.58935164663409, 0.5878912954337202, 0.5713429109299861, 0.581339368698712, 0.5885664711496015, 0.5671878754441224], [0.5700448866480712, 0.5770283411229065, 0.569712211180172, 0.5634429963042455, 0.556890439469129, 0.5661968236140221, 0.5845566997790406, 0.5650257201047006, 0.5751238274188786, 0.5676163647140509], [0.5540434811868222, 0.5602314952177019, 0.564047156325445, 0.5553810254682923, 0.5744274612069734, 0.5689066095883383, 0.5619760331875249, 0.5606761104236199, 0.5614949377867791, 0.569442586215989], [0.5523493559586798, 0.5472838871873997, 0.5433070568609351, 0.5544386175777517, 0.5527323575263589, 0.5630444492504367, 0.5469478156594952, 0.5547241121718416, 0.5544209952261778, 0.5606071936079463], [0.548835641071592, 0.5395039978312355, 0.5414213047182206, 0.5321902613713463, 0.5261295092496957, 0.5305026900274954, 0.5356529959294345, 0.5494464936583147, 0.5469241233825712, 0.5339799327990468], [0.5294187707817815, 0.5104765439856005, 0.5142961219459762, 0.4932679678710845, 0.5107229554633513, 0.513251241215378, 0.5203250509717339, 0.5031323156243284, 0.5125820398418535, 0.513726482374532], [0.48681955687213885, 0.4873294158927164, 0.47143217157667827, 0.47872970770478696, 0.4885265521626041, 0.4867753217334243, 0.4877950774355082, 0.49359173844045157, 0.48440166635260284, 0.5040481493006133], [0.4876016009902988, 0.4590634196433452, 0.45672181984142746, 0.4634005932344578, 0.4389922063605243, 0.48000231396187054, 0.4835017277365605, 0.456961795358244, 0.48768156553712194, 0.4789953776353756]], 'MSE': [[0.075942822729632889, 0.074993053813490806, 0.074906007000646521, 0.08134525373887723, 0.085863379426415379, 0.073447445969661851, 0.079938703501762312, 0.085414571914999779, 0.081754532610100877, 0.075370055294731036], [0.082859632665538974, 0.085217817376924118, 0.077403693172926516, 0.08016748308930044, 0.07860064900912446, 0.080719818439210098, 0.074594663102944422, 0.07381673836699254, 0.07785269173589851, 0.072773899399945982], [0.078214832208835558, 0.079085715631325854, 0.07847094944801776, 0.07604188534056161, 0.080252423587244645, 0.081696241470006453, 0.077998369292566053, 0.082228073939459259, 0.079524632053950814, 0.082166051129084205], [0.085626958062396188, 0.080361802817438682, 0.080074410441386856, 0.079731004349470141, 0.078344405996605873, 0.082107712413747327, 0.084962779471308592, 0.078682940983271388, 0.079467712955420655, 0.08166619366981831], [0.079473104735103398, 0.086044429699662264, 0.083667392673054647, 0.081179634399491982, 0.082299398026055431, 0.083619121892443138, 0.08250638339120045, 0.081792848291687287, 0.074961988710678787, 0.079827839815728607], [0.081804649065834359, 0.081560833867421773, 0.08575171411075963, 0.082242958062544641, 0.081824191121305984, 0.08267729206531696, 0.084866825821772046, 0.083640745650345891, 0.082129468402045477, 0.08584097823356561], [0.085872022564846204, 0.084048403210205319, 0.085588374997358149, 0.086811288896372393, 0.088193160772832832, 0.086880500412718234, 0.082892573634460495, 0.086513814191145316, 0.085084831126648164, 0.085939565839704524], [0.088953324882224502, 0.088018723791173883, 0.086849185022636596, 0.089073858699498715, 0.08475664594519397, 0.085996671956136708, 0.08721234426226003, 0.088013775412219566, 0.087761314066800683, 0.086030888715365683], [0.089087879155795108, 0.09095431327917447, 0.091117770630280981, 0.08921206354272565, 0.089262136207906018, 0.087114313189119913, 0.089933469211270586, 0.088998293497581399, 0.089243344613463768, 0.087362348899332573], [0.090335162253071963, 0.091974791307457254, 0.09125152452948096, 0.093313476081772442, 0.094305415508906532, 0.09293315234242143, 0.09255352536822356, 0.089956305457706415, 0.090498989732348947, 0.092779852777507693], [0.093762938489153125, 0.097549822885610094, 0.096818861836031916, 0.10112936440646522, 0.097484548119497319, 0.096845860744151469, 0.095895346049709021, 0.099012258416921309, 0.097223544928574601, 0.097255569574863421], [0.10250751623839524, 0.10244339974703587, 0.10510090049065141, 0.10382534152608328, 0.10181369403167902, 0.10230503395835029, 0.10223562150794385, 0.10111104292748269, 0.10289071487244171, 0.09902243727847132], [0.10217440640258106, 0.10772705014523223, 0.10819154777332461, 0.10688458840768186, 0.11192340364109742, 0.10377774608922653, 0.10310101358808865, 0.10833692074396598, 0.10220499732811969, 0.10379274882676172]], 'Rp': [[0.78278513827449325, 0.78478329344033293, 0.79108498936183058, 0.76986101675394347, 0.75663671318384207, 0.80158853037092093, 0.77589717021800109, 0.7608855233527374, 0.770796766288811, 0.78386593976434837], [0.7647379518183548, 0.76075985507508592, 0.78319413965153051, 0.77603469442833228, 0.7803393138925564, 0.77215176318807188, 0.79171252894006083, 0.79474256078132455, 0.78196618551751951, 0.79645037923547513], [0.77984357405265892, 0.78172598182250808, 0.77954854916556648, 0.78639750695936039, 0.77381575735516572, 0.7739820348562727, 0.78148093695283982, 0.7680012400669739, 0.77660969454910556, 0.76647691681744567], [0.75857953669066225, 0.77289516993594631, 0.77347437265558572, 0.7764367319345421, 0.77870293948353264, 0.76792372529984454, 0.75825757764395363, 0.77922041827258803, 0.77572460180101666, 0.76842546950341095], [0.7775948075182566, 0.75772949746028584, 0.7645016456383692, 0.77177738940426233, 0.7675274826418611, 0.76225867645310452, 0.76612402141367775, 0.77075689022182858, 0.78933855759681459, 0.77598461429857224], [0.76848297403058174, 0.77006129749817021, 0.75725194154003661, 0.76928615243476184, 0.76836896202312621, 0.76777569076890895, 0.75783589533016482, 0.76413946660637466, 0.76853864814873463, 0.75603563654874517], [0.7566606936998318, 0.76085494540348919, 0.7570701610134023, 0.75237542591796536, 0.75057092069111098, 0.75383123359618776, 0.76625746534257921, 0.75424913101440216, 0.75957911434155911, 0.7556970671506793], [0.74677443282084599, 0.75043738139036742, 0.75332382525440444, 0.74814853359282407, 0.75890813476502883, 0.75673792688201102, 0.75178519473811578, 0.75024469452474496, 0.7518352526921851, 0.7562126449943839], [0.74608092152501349, 0.74127990530278132, 0.73927377359389612, 0.74580175119849323, 0.74613834531133094, 0.75190140087366297, 0.74312606898958367, 0.74632692412083801, 0.74794723621345816, 0.75074070551324479], [0.7422519456566814, 0.7367503180286652, 0.73896114162424642, 0.73400324556206131, 0.72907247607122883, 0.73185484015969193, 0.73473360414910149, 0.74265048517375964, 0.74155767845211906, 0.73333829398522565], [0.7306540399531537, 0.72002576365172766, 0.72274567168508752, 0.70995592473446323, 0.71734963915766514, 0.72107567182992138, 0.72451225370843386, 0.71466052537772373, 0.71984944283200769, 0.72066824836152898], [0.70407854605039211, 0.70399297309196418, 0.69763090253365989, 0.70174825908951877, 0.70730866392385039, 0.70295427292974966, 0.70478586105502827, 0.70682020179616478, 0.70317493030130984, 0.71329416509512433], [0.70109411131445853, 0.68557449434504847, 0.68520146108698299, 0.69180526373455253, 0.67697012546263546, 0.69887452820150298, 0.70233321758059775, 0.68431905982690411, 0.70232210971130127, 0.69887761991627684]]} 
average_performances = {'R^2': [0.6021371032015532, 0.6072465040238522, 0.6017537605872219, 0.5922459587652327, 0.5912682575837295, 0.5826155171809072, 0.5695638310355218, 0.5630626896607486, 0.5529855841027024, 0.5384586950038953, 0.512119949007562, 0.48694493574715236, 0.4692922420299227], 'MSE': [0.078897582600031879, 0.078400708635880598, 0.079567917410105229, 0.081102592116086406, 0.081537214163510605, 0.083233965640091237, 0.085782453564629157, 0.087266673275351023, 0.089228593222665048, 0.09199021953588972, 0.097297811545097757, 0.10232557025785347, 0.10581144229460797], 'Rp': [0.77781850810092612, 0.78020893725283114, 0.7767882192597898, 0.77096405432210824, 0.77035935826470325, 0.76477766649296053, 0.75671461581712074, 0.75244080216549114, 0.74586170326423029, 0.73651740288627809, 0.72014971812917117, 0.70457887758667626, 0.692737199118026]}

500 iterations

'''