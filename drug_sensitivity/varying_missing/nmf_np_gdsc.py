"""
Test the performance of NP-NMF for recovering the GDSC dataset, where we vary 
the fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.nmf_np import nmf_np
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty

import numpy, matplotlib.pyplot as plt, random

''' Settings '''
fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 20
iterations = 1000

init_UV = 'random'
expo_prior = 1.
K = 2

metrics = ['MSE', 'R^2', 'Rp']

''' Load data '''
location = project_location+"DI_MMTF/data/datasets_drug_sensitivity/overlap/"
location_data = location+"data_row_01/"
R, M_original, _, _ = load_data_without_empty(location_data+"gdsc_ic50_row_01.txt")

#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 1000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_original,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
    
        NMF = nmf_np(R,M_train,K)
        NMF.initialise(init_UV,expo_prior=expo_prior)
        NMF.run(iterations)
    
        # Measure the performances
        performances = NMF.predict(M_test)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
1000 iterations
repeats=10 
fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.5060407585284845, 0.5333029308536477, 0.5660821396803861, 0.5137703787512382, 0.49743459828016856, 0.5669949001145442, 0.5328920856008045, 0.5191225983808463, 0.555947819431266, 0.5521915852926196], [0.5353482719877596, 0.5136404101319185, 0.5507475327656193, 0.534602809669845, 0.5507852488934213, 0.49960367369528125, 0.563375763464464, 0.5762588602197325, 0.5460698716923946, 0.5815914374647371], [0.5413235830967862, 0.5435399168135089, 0.5369243182516463, 0.540513760265547, 0.5422711283731333, 0.5320805062153848, 0.5425019475576691, 0.5260824335769881, 0.5615687036012784, 0.5082806822547911], [0.5199749336034657, 0.54941254535977, 0.5264677795943207, 0.5243271107886658, 0.5401872957128717, 0.525558314127241, 0.5133127267335235, 0.5306185646853838, 0.5448813253122764, 0.5314537630275766], [0.5306562348444082, 0.5093274679339992, 0.4916921852081604, 0.501363411557203, 0.5228836878361556, 0.5170831672581779, 0.5253806533287051, 0.5271145913260202, 0.5515294909667621, 0.5041927634873182], [0.538108582572649, 0.5386914358694668, 0.5014027795655667, 0.5271336447678613, 0.5192723339727278, 0.4776226718649689, 0.5237195269209831, 0.5112992943523629, 0.5186291310310054, 0.5215940202617795], [0.48932083944897653, 0.4894941140910466, 0.499325782562852, 0.4849452698937615, 0.46495204228439535, 0.48152148111551807, 0.5053567072328169, 0.4766432746544387, 0.48203139593765987, 0.488428163090442], [0.47303349347746415, 0.49948915687121176, 0.4729960182241406, 0.4874696492182983, 0.46612324370865044, 0.5012274653330921, 0.48536010756879666, 0.486785565486214, -0.05336260639755719, 0.4589329859109218], [0.4286950422674076, 0.47212032600126064, 0.4738216598729905, 0.47746221887939155, -0.08023051647942459, 0.44381802425038686, 0.45846300364364967, 0.4745212734390918, -0.2783343381771637, 0.4691930963026597], [-0.12079422316204314, 0.41148222026951087, 0.42999039612322854, 0.38733334403224584, 0.39019657533009855, 0.28866990505404466, 0.39878571826657006, -0.12226363087425818, 0.41504534216039657, 0.41300696875144505], [-15.586261023257677, 0.28658008557054204, 0.3299359483728901, 0.24254343064608652, 0.22352930901244128, 0.3299037909466137, 0.024224736701983662, -567.3675272143224, 0.0682473661574764, -4.846320524734421], [-1188661.821222181, -0.9307448264729832, -99.17123266808007, -15.21792039294833, -0.07816292026035443, 0.13133157072106905, 0.13267755619808974, -2.7032089081133517, -3.808632155534461, 0.14283198640511452], [-0.17768235700969126, -28421.619551367272, -32494.20575735634, -3902.0031605461163, -1206782.4303194135, -4.664829858847253, -1775.8925601829337, -0.28610945794340736, -57523.119147280304, -1547531.237535557]], 'MSE': [[0.096760538665035423, 0.090324488184432963, 0.086316216141761201, 0.09639894270408271, 0.099378582071684374, 0.088851297131436011, 0.09318172025369989, 0.096236105311380979, 0.0885577668074983, 0.087216168812378383], [0.092155335788594417, 0.097798143248055414, 0.089822746851471014, 0.093560685394138768, 0.089975355210008739, 0.09934791027095502, 0.087023022204003778, 0.084208765073924441, 0.090857959005191252, 0.083108965030300186], [0.091113434243296806, 0.092752679383306558, 0.092069408614374654, 0.091211566681915851, 0.09134889949902246, 0.094833404794292933, 0.091405461632530119, 0.094599279254931126, 0.087516016532757313, 0.097165531291851931], [0.096287095130200132, 0.089683748662104906, 0.093589493118144088, 0.095244388962619997, 0.091044400578677395, 0.094229105246533648, 0.096578071431975124, 0.093733800203385467, 0.090326922571444965, 0.092895447209534118], [0.094009853102214283, 0.098209408117003807, 0.10148795096447902, 0.0998082078243199, 0.095052325040520053, 0.095766238893703753, 0.094377060712564409, 0.094530392822133644, 0.089077690412530997, 0.099003813827430079], [0.091984019577862397, 0.091942364919121777, 0.099596354082737676, 0.094798244498704914, 0.095787921952934549, 0.10479939503334078, 0.094295447297515975, 0.097633472947215749, 0.096090208503715427, 0.094883749700071879], [0.1019944897418615, 0.10144226838736421, 0.099588911856066165, 0.1024209085965252, 0.10649188092320717, 0.10383896574756574, 0.098695190286347365, 0.10409256037651406, 0.10372733057214543, 0.10167882864195951], [0.10511209250063071, 0.10017617263803127, 0.10498811278562427, 0.10267905478576936, 0.1063264169715642, 0.099497647142122794, 0.10246688508032635, 0.10281694451253477, 0.2108173758808948, 0.10811212299784881], [0.11369657949356118, 0.10605527809535809, 0.10498125277954119, 0.10462458276653122, 0.21558385704954192, 0.11088407217274315, 0.10749821427187763, 0.10502861531826606, 0.25603278128213802, 0.10553777222653252], [0.2244129572693376, 0.117544560032038, 0.1134249058784559, 0.12220792050062043, 0.121357557528417, 0.14080197410126366, 0.11983387593407878, 0.22406814853736512, 0.11684092732753446, 0.11686433879934108], [3.3047994172491286, 0.14216680618796254, 0.1335687067101429, 0.15116688223249158, 0.15470559120679581, 0.13332554624116352, 0.19507440763848435, 113.26023859056689, 0.18585341834616484, 1.1692745172032815], [237434.75629302333, 0.38580731994270689, 19.918137636333764, 3.2302457065538666, 0.21461866719342804, 0.17315837861905781, 0.17311674523923068, 0.73939416731584195, 0.95959115410932594, 0.17114335946849676], [0.23483483943512395, 5660.3399970662231, 6471.2825482423459, 777.43449043939904, 240758.34687214188, 1.1305497899600496, 354.69513419505415, 0.25658072898424977, 11475.777657530738, 308294.049490089]], 'Rp': [[0.71936774493401445, 0.73601788610757934, 0.7558103085462351, 0.72175443462117383, 0.71488333997081333, 0.75620751626722238, 0.73542856114543886, 0.72710324944228288, 0.74791265957935438, 0.74773224990154097], [0.73532579050929947, 0.72105867731621565, 0.74510011085101724, 0.73392044181579441, 0.74453219420196826, 0.71693432646959865, 0.75291020130832909, 0.76258153026675313, 0.741607917978652, 0.7649079795229603], [0.73988489974167526, 0.74066964916274924, 0.73690922692076644, 0.73973414766407564, 0.74035025240224794, 0.73350795305658445, 0.74015270355217611, 0.72966064218429305, 0.75100944921140877, 0.71826572210447603], [0.72678618043073806, 0.74402781107491023, 0.73303250924590868, 0.729702362725693, 0.73981588669015097, 0.73059280062328491, 0.72255324238049057, 0.73275946455891061, 0.74274389135903229, 0.73274352262972642], [0.73375684699666788, 0.7209571063582888, 0.71166272473410186, 0.71586576438512772, 0.72972613937233566, 0.72482147875456648, 0.73069472316210948, 0.73397198882758874, 0.74625415236094816, 0.7197409809858144], [0.73781326157856986, 0.73952713758763655, 0.71922970543752651, 0.73214862002733538, 0.72817286728340491, 0.70590737603396492, 0.72986192308613962, 0.72271809059891878, 0.72857152093410316, 0.72844919814905074], [0.7090030922591557, 0.71124066684141063, 0.7196460201647048, 0.70752265540125481, 0.70226122892012366, 0.70458381341803789, 0.71961433658583285, 0.70666099835355878, 0.7067652407499958, 0.71019218836891107], [0.70278043766541498, 0.71791032283735901, 0.70535447163171061, 0.71019389000639566, 0.69926174325538604, 0.71806839386349686, 0.70938963329904337, 0.71076921039046792, 0.54653432731718321, 0.69705302673219083], [0.68446388118227797, 0.70243049516425538, 0.70399575649984192, 0.70686373641365519, 0.53602519485722488, 0.68679951948732609, 0.69633473310859773, 0.70482050513513361, 0.50361525577634891, 0.70068933449250448], [0.51711941342211432, 0.67404256817611741, 0.67919988791866381, 0.66376288087402158, 0.6676404294667303, 0.62446674646254263, 0.6646425729679396, 0.50964386856596977, 0.6718736700598823, 0.67896154448486568], [0.16865969467316133, 0.61730645521328054, 0.64528336160044697, 0.61092086241950982, 0.59331726324419698, 0.64515944937029557, 0.55208083043186262, 0.050842322101870847, 0.54386367722875417, 0.25599369973762803], [0.017812336829178117, 0.42023736151618452, 0.1019380477580181, 0.15147683029764161, 0.11841864086602573, 0.57499480063689801, 0.57172941885038375, 0.28957928089971424, 0.28236882475112379, 0.57574772978988564], [0.10198214161157389, 0.012119784883604951, -0.0064491381963088191, 0.036109417980537052, 0.039182938294302284, 0.26633310110718644, 0.033367438935612156, 0.084046302464303044, 0.0082023116624770406, 0.034751568836944781]]} 
average_performances = {'R^2': [0.5343779794914005, 0.5452023879985173, 0.5375086980006734, 0.5306194358945093, 0.518122365374691, 0.517747342117937, 0.48620190703119076, 0.42780550794012323, 0.3339529790000251, 0.2891452615951239, -58.62951440949065, -118878.33242829393, -287843.56366533774], 'MSE': [0.092322182608339007, 0.090785888807664306, 0.092401568192827993, 0.09336124731146199, 0.096132294171689989, 0.096181117851322107, 0.10239713351295562, 0.11429928252953474, 0.13299230054560912, 0.14173571659084522, 11.883017388358251, 23746.072150615815, 57379.354815506304], 'Rp': [0.7362217950515656, 0.74188791702405887, 0.73701446460004527, 0.73347576717188445, 0.72674519059375497, 0.72723997007166508, 0.70974902410629859, 0.69173154569986484, 0.66260384121171656, 0.63513535823988465, 0.46834276160210064, 0.31043032721950536, 0.060964586758023284]}


'''