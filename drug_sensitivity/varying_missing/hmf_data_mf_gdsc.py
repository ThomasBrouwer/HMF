"""
Test the performance of HMF for recovering the GDSC dataset, where we vary the 
fraction of entries that are missing.
We repeat this 10 times per fraction and average that.

GDSC has 0.7356934001670844 observed entries
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.hmf_Gibbs import HMF_Gibbs
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty,load_data_filter

import numpy, random


''' Settings '''
metrics = ['MSE', 'R^2', 'Rp']

fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 10

iterations, burn_in, thinning = 200, 180, 2
settings = {
    'priorF'  : 'exponential',
    'orderG'  : 'normal',
    'priorSn' : 'normal',
    'priorSm' : 'normal',
    'orderF'  : 'columns',
    'orderG'  : 'rows',
    'orderSn' : 'rows',
    'orderSm' : 'rows',
    'ARD'     : True
}
hyperparameters = {
    'alphatau' : 1.,
    'betatau'  : 1.,
    'alpha0'   : 0.001,
    'beta0'    : 0.001,
    'lambdaF'  : 0.1,
    'lambdaG'  : 0.1,
    'lambdaSn' : 0.1,
    'lambdaSm' : 0.1,
}
init = {
    'F'       : 'kmeans',
    'Sn'      : 'least',
    'Sm'      : 'least',
    'G'       : 'least',
    'lambdat' : 'exp',
    'tau'     : 'exp'
}

K = {'Cell_lines':10, 'Drugs':10}
alpha_l = [1., 1., 1., 1.] # GDSC, CTRP, CCLE IC, CCLE EC


''' Load data '''
location = project_location+"HMF/drug_sensitivity/data/overlap/"
location_data = location+"data_row_01/"

R_gdsc,     M_gdsc,   cell_lines, drugs   = load_data_without_empty(location_data+"gdsc_ic50_row_01.txt")
R_ccle_ec,  M_ccle_ec                     = load_data_filter(location_data+"ccle_ec50_row_01.txt",cell_lines,drugs)
R_ctrp,     M_ctrp                        = load_data_filter(location_data+"ctrp_ec50_row_01.txt",cell_lines,drugs)
R_ccle_ic,  M_ccle_ic                     = load_data_filter(location_data+"ccle_ic50_row_01.txt",cell_lines,drugs)


''' Seed all of the methods the same '''
numpy.random.seed(0)
random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 1000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_gdsc,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
     
        D = [(R_gdsc,    M_train,   'Cell_lines', alpha_l[0]), 
             (R_ctrp,    M_ctrp,    'Cell_lines', alpha_l[1]), 
             (R_ccle_ic, M_ccle_ic, 'Cell_lines', alpha_l[2]),
             (R_ccle_ec, M_ccle_ec, 'Cell_lines', alpha_l[3])]
        R, C = [], []

        HMF = HMF_Gibbs(R,C,D,K,settings,hyperparameters)
        HMF.initialise(init)
        HMF.run(iterations)
        
        # Measure the performances
        performances = HMF.predict_Dl(l=0,M_pred=M_test,burn_in=burn_in,thinning=thinning)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
repeats=10 
fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.6155217345820396, 0.6029498611141813, 0.618376221687865, 0.6248497907423864, 0.5723037817812888, 0.6561889466111129, 0.6121430520802655, 0.5860120900347748, 0.5921202651013384, 0.6211203078561853], [0.6037588304444947, 0.5719666737156777, 0.6121558910568417, 0.6018774314230521, 0.608902418697885, 0.598099809223715, 0.6165600567810603, 0.632352203962586, 0.6089776144458043, 0.6396062614167726], [0.6160457623611293, 0.6053642313098477, 0.6005668600236748, 0.6094387401334875, 0.5951711910028724, 0.594674200204578, 0.6059703317981122, 0.6011711899950352, 0.605015629057321, 0.5761822607438258], [0.5866234676222457, 0.5980630488909577, 0.5788456614145225, 0.6020120493090307, 0.6082277619732639, 0.5916523141352645, 0.5758781101705368, 0.6020158104074156, 0.6084957898815206, 0.5876036580537315], [0.5964374223004856, 0.5718533822294047, 0.5771113287104903, 0.5895080421885486, 0.5851621842669961, 0.5819714835374896, 0.588438371693885, 0.5869877633650976, 0.6112218536383482, 0.5998453381198467], [0.5913507608528265, 0.5869400303437347, 0.5775652433641448, 0.5915992068771347, 0.577090229897032, 0.5854005498509167, 0.5737564837890272, 0.5751283975367986, 0.5864050356399952, 0.5823069714868042], [0.563330131334747, 0.5747108861380663, 0.564952342395863, 0.5436806071742466, 0.56193628130273, 0.567754089020831, 0.5799288778400382, 0.5671705518448158, 0.556133928557055, 0.572482708909241], [0.5606984081989055, 0.5558255073934613, 0.5586348535994112, 0.5607562339613129, 0.5485030621854614, 0.5561267502400722, 0.5398987241910195, 0.5558481063139156, 0.561441730250055, 0.5645380335672416], [0.5210152769060946, 0.5317151329964115, 0.5254015981926959, 0.5411023085309937, 0.535083338878233, 0.5511963004729511, 0.5357051768557527, 0.5487390802391244, 0.5445585444190105, 0.5580809621028884], [0.5388934604599305, 0.541128375976007, 0.5304830159050804, 0.5218071336578574, 0.5222141046577278, 0.5123925901486185, 0.5230141434323636, 0.5294010786299599, 0.5374351691136248, 0.5184244078789321], [0.5196546073668701, 0.5013219412175736, 0.5124512657229601, 0.4783349443416156, 0.5043822145903394, 0.5013235677127079, 0.5123671499516211, 0.47453652630968346, 0.5049548458253623, 0.4863046817988018], [0.49606425452006697, 0.4713196696125672, 0.47069340058821174, 0.4795833128078606, 0.49193459522081284, 0.49131747870100806, 0.4762822736087925, 0.4805614132390952, 0.497187263195388, 0.4912775789035556], [0.4755655445656879, 0.436477149883567, 0.4610393068900206, 0.46477368854216206, 0.453840202790172, 0.47603777947434744, 0.4627557593770587, 0.46480185079769076, 0.48625555585136804, 0.45620813847531816]], 'MSE': [[0.075314562302779789, 0.076845030640578432, 0.075913723646596903, 0.074376553684184721, 0.084573756129141822, 0.070548956743948274, 0.077372222789237319, 0.082849774114785599, 0.081343860089588771, 0.073791456579014314], [0.07858732859956355, 0.086069783409123274, 0.077544867877733084, 0.080036195234676671, 0.078334791350349611, 0.079792640337666573, 0.076422928230938866, 0.07306150850142773, 0.078266441598077885, 0.07158541506790575], [0.076270302754471733, 0.08018997996709322, 0.079415902039502301, 0.077529425948152833, 0.080791639941676263, 0.082147519297973759, 0.078724845989254166, 0.079610718499713212, 0.078843501870276222, 0.083747931634192904], [0.082918222992899207, 0.080000479662838977, 0.083237463839217443, 0.07968946735832487, 0.077572168498062949, 0.081102142190022777, 0.084162616163967002, 0.079476024624563921, 0.077701426991610312, 0.081762992826958342], [0.080833839636721722, 0.085694680608066537, 0.084433297081688785, 0.082164982644785167, 0.082645044604159182, 0.082898371018953212, 0.081838165793331419, 0.082561669811136232, 0.077221263523917033, 0.079903710009580714], [0.081381030683698383, 0.082326046851520035, 0.084382663750313544, 0.081874461592684369, 0.0842673532533042, 0.083176985708591417, 0.084388979373738723, 0.084881584220670853, 0.082560929469122996, 0.082842360771906487], [0.087213115162368654, 0.0845089030732563, 0.086535158626907638, 0.090741127285226889, 0.087188874745846814, 0.0865686170398344, 0.083815953721807904, 0.086087219830944847, 0.088887709334561554, 0.084972342584169802], [0.087625890794818931, 0.088900572811992457, 0.087927407329640786, 0.087997002808919714, 0.089919726052383048, 0.088546062404848816, 0.091608025819593222, 0.088981013660543659, 0.087771962891052782, 0.087010881184696867], [0.095323738938981689, 0.094082201388250394, 0.094690204801802166, 0.091882312125842969, 0.092784387667439502, 0.089476437532299932, 0.092165197797198561, 0.090194535295309131, 0.091218657827703151, 0.087864627304747409], [0.092325852521330312, 0.091650354525886671, 0.093428109574125229, 0.095384586748230249, 0.095084623887859127, 0.096517898485224005, 0.095072698195782318, 0.093958519294545753, 0.092394347263558302, 0.095876799483330027], [0.095708440342661655, 0.099374107028968636, 0.097186610350783686, 0.10410957304229462, 0.098747890157817889, 0.099219047703940771, 0.097486268556083361, 0.10471062393814677, 0.098744914473309242, 0.10273997852804653], [0.10066089287822184, 0.10564251607800666, 0.10524779837578341, 0.10365532255000698, 0.10113529038307834, 0.10139961077335791, 0.10453356633953635, 0.10371271803984355, 0.10033927295850288, 0.10157222715095521], [0.10457444692376411, 0.11222508615049022, 0.10733173852027818, 0.10661108321002775, 0.10896116618825197, 0.1045689620204797, 0.10724222853612259, 0.10677281814950493, 0.10248947921734772, 0.1083323442335371]], 'Rp': [[0.7849220985010229, 0.77853142066266967, 0.78822580233215944, 0.79126554936309967, 0.76210890292398881, 0.81057833855206818, 0.78364111845221573, 0.76904071955320608, 0.77170656368793467, 0.78898784521011733], [0.77799507224551134, 0.75926962990463776, 0.78303264111505533, 0.77684133202197181, 0.78158378554022701, 0.77501765752164087, 0.78615478269248795, 0.79638631735474952, 0.78130181906623053, 0.80030363807638527], [0.78591409679749202, 0.77886071793182698, 0.77681994060558346, 0.78181486696269298, 0.77305761438453779, 0.77239104697967187, 0.77948948338699997, 0.776439015088631, 0.7788685771636138, 0.7614514362817586], [0.76726081425838955, 0.77399142696479606, 0.76327532611214355, 0.77658043794511056, 0.78102489115495433, 0.77117356732756148, 0.76135156263834469, 0.77672770376783007, 0.78101607818247054, 0.76904671239065048], [0.77366261253665125, 0.75875551010516473, 0.76202032277264187, 0.76901392476684749, 0.76741944600978251, 0.76444290757690581, 0.76868673044158342, 0.7684389120653643, 0.78248240364572708, 0.77577813933250483], [0.76994534723604291, 0.7678941915812203, 0.76161925800378183, 0.77071405976126506, 0.76122346286957632, 0.76602704371126229, 0.76022933124834857, 0.76099409215864366, 0.76787110752195631, 0.76482451919132233], [0.7519966990860697, 0.75931870497967091, 0.75402590214472398, 0.74034290553726068, 0.75359173637202526, 0.75552937076497384, 0.76387983964488038, 0.75493557489735863, 0.74851707630830766, 0.75855247898634648], [0.75125543941149031, 0.74814390389002317, 0.75048726547181221, 0.75092360825865201, 0.74373216206077819, 0.7479414448841365, 0.73859707455018153, 0.74831505913324825, 0.75137302318888599, 0.75320188663134435], [0.72833352658570205, 0.73345615062426306, 0.72871495142602971, 0.73748003364584891, 0.73594163358480025, 0.74425470010093409, 0.73577616244276356, 0.74196088949582517, 0.74145179856332288, 0.74976378372977903], [0.73590400234434294, 0.73814652414206394, 0.73100462342487027, 0.72792606795560921, 0.72690420485828422, 0.72168010867067123, 0.72727283382105956, 0.73031564903032242, 0.73632171740777475, 0.72405747332212078], [0.72376724352152599, 0.7150087941786557, 0.72085334075787155, 0.70115083842789117, 0.71358217301890892, 0.71287755069255376, 0.7193472873216552, 0.69850345681720938, 0.71408861492766995, 0.70305476273493839], [0.71069597261543571, 0.69385134721928299, 0.6948476280915743, 0.70115025187649316, 0.7070910787608955, 0.70662445641610949, 0.69898258612974906, 0.7006878993524196, 0.7090161492807836, 0.70654401764679076], [0.6940666764619764, 0.67303802749098529, 0.68509075301866984, 0.68938950679273392, 0.68595591807156786, 0.69514911915389588, 0.68943109988550799, 0.68935020689128623, 0.70077231801165063, 0.68366515604834988]]} 
average_performances = {'R^2': [0.6101586051591438, 0.6094257191167889, 0.6009600396629884, 0.5939417671858489, 0.5888537170050592, 0.5827542909638413, 0.5652080404517635, 0.5562271409900857, 0.5392597719594155, 0.5275193479860102, 0.49956317448375354, 0.48462212403973587, 0.46377549766473936], 'MSE': [0.077292989671985585, 0.077970190020746288, 0.079727176794230664, 0.080762300514846591, 0.082019502473234002, 0.083208239567555103, 0.086651902140492482, 0.088628854575849042, 0.091968230067957485, 0.094169378997987205, 0.09980274541220531, 0.1027899215527293, 0.10691093531498042], 'Rp': [0.78290083592384818, 0.78178866755388976, 0.77651067955828068, 0.77214485207422512, 0.76907009092531731, 0.76513424132834196, 0.75406902887216165, 0.74839708674805516, 0.73771336301992674, 0.729953320497712, 0.712223406239888, 0.70294913873895348, 0.6885908781826624]}
'''