"""
Test the performance of NP-NMTF for recovering the GDSC dataset, where we vary 
the fraction of entries that are missing.
We repeat this 10 times per fraction and average that.
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from HMF.code.models.nmtf_np import nmtf_np
from HMF.code.generate_mask.mask import try_generate_M_from_M
from HMF.drug_sensitivity.load_dataset import load_data_without_empty

import numpy, matplotlib.pyplot as plt, random

''' Settings '''
fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
repeats = 20
iterations = 1000

init_FG = 'kmeans'
init_S = 'random'
expo_prior = 1.
K, L = 4, 4

metrics = ['MSE', 'R^2', 'Rp']

''' Load data '''
location = project_location+"DI_MMTF/data/datasets_drug_sensitivity/overlap/"
location_data = location+"data_row_01/"
R, M_original, _, _ = load_data_without_empty(location_data+"gdsc_ic50_row_01.txt")

#''' Seed all of the methods the same '''
#numpy.random.seed(0)
#random.seed(0)

''' Generate matrices M - one list of (M_train,M_test)'s for each fraction '''
M_attempts = 1000
all_Ms_train_test = [ 
    [try_generate_M_from_M(M=M_original,fraction=fraction,attempts=M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]

''' Make sure each M has no empty rows or columns '''
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms_train_test,fraction in zip(all_Ms_train_test,fractions_unknown):
    for (M_train,M_test) in Ms_train_test:
        check_empty_rows_columns(M_train,fraction)

''' Run the method on each of the M's for each fraction '''
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms_train_test) in zip(fractions_unknown,all_Ms_train_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for repeat,(M_train,M_test) in zip(range(0,repeats),Ms_train_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
    
        NMTF = nmtf_np(R,M_train,K,L)
        NMTF.initialise(init_S,init_FG,expo_prior=expo_prior)
        NMTF.run(iterations)
    
        # Measure the performances
        performances = NMTF.predict(M_test)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
 
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)

'''
1000 iterations
repeats=10 
fractions_unknown = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9] 
all_performances = {'R^2': [[0.5741460515433148, 0.5686191260030459, 0.5649491534666086, 0.525572361142702, 0.5115320657279884, 0.5675076220285762, 0.5851169312502029, 0.5262619893231215, 0.5686970719143005, 0.5730023178421657], [0.5472946594510142, 0.5143617535648558, 0.5425717118879698, 0.5365181880099156, 0.5525264850314415, 0.5159555166095834, 0.5371438059237321, 0.5829319098108354, 0.5611493878084688, 0.5655455055046974], [0.5585804282455544, 0.5728510453377595, 0.5536929241995628, 0.5696514238315323, 0.5345815388641648, 0.5345520702065443, 0.5594741896318245, 0.5323285072053758, 0.5471383786270179, 0.5213829125503158], [0.5046172227486141, 0.5435022786199599, 0.503000264402141, 0.5213852087364605, 0.4236867910334373, 0.5244136764091856, 0.4709822944777762, 0.5481985816643684, 0.5236918224779579, 0.5332495938638928], [0.5111063614486924, 0.5074915830961142, 0.46660980720853207, 0.49147717827915993, 0.5103653069973269, 0.5012399723279444, 0.4920158005896934, 0.5111046276073463, 0.535223203510347, 0.42259572416833724], [0.47226747558795523, 0.494807265990191, 0.4504844109400884, 0.4111989883537077, 0.3986190749950832, 0.024706310907554818, 0.4657763823469212, 0.489210873965615, 0.496268815494157, 0.48454572078142677], [0.44622231282366065, 0.36726769169544493, 0.13060727414683493, 0.45200773065523936, -0.4283296420026952, 0.4055566181927702, 0.43293199813620553, 0.4474159212647212, 0.041152808842784716, 0.4607608262878281], [-269256.2240936693, 0.2873474829984338, -0.4629419112684814, 0.3420823203130765, -0.7523558861617183, -176.15396908525253, 0.38710282752064495, 0.40083239161268325, -659.141635090169, 0.20809308806829174], [0.04321166051766279, 0.13976418325208062, -24.243565490380863, -0.04320096667933271, -0.06833177397114198, 0.23393836500783116, -0.9550636788238067, -1.1202488886879731, 0.25785975611855794, -812.056100767108], [-0.7547810975798295, -296.6542550411777, 0.0014184980748567222, -2693.5875542822755, -130.92101419435372, -0.27363027230285986, -0.22159438564486367, -2.310272333845568, -938.4156437540988, -161.070345526955], [-180165.90872534286, -0.8862360036319812, -10952.937186505216, -2.560362797652484, -6.1732696861981236, -5111.803099979735, -57.87669372384709, -172.25017205338816, -284270.1734941804, -705980.3921641462], [-120974.49254056875, -488883.91858519014, -2817.08851777897, -39859.11803866698, 0.280079971462014, -5881.178417321092, -21023.72499231114, -25783.38953826947, -133225.83137252176, -587.792618124669], [0.12428869292374456, -109068050.03450751, -3135856.3820224903, -50052.06510868305, -498402.54153391893, -16361.297987445552, -3399135.0626703002, 0.0453593107576542, -72495.14560817298, -1234697.5169788094]], 'MSE': [[0.083419549602003457, 0.083489396510671846, 0.086541593089467433, 0.094059104539909552, 0.096590912405265364, 0.088746088192461645, 0.082763568885286062, 0.094807327048425566, 0.086015170739359603, 0.083163023977356698], [0.089785984117727757, 0.097653094091309914, 0.091457406074417366, 0.093175629115309591, 0.089626594757158645, 0.096101440748263961, 0.092251280354844686, 0.082882650584226267, 0.087839666163073607, 0.086296186606419648], [0.087685461128121756, 0.086796658678508221, 0.088735448975027553, 0.085427515466715065, 0.092883510013641937, 0.094332492069856388, 0.088014505947701771, 0.093352492671605142, 0.090396478236549435, 0.094576482780171264], [0.099367662103845747, 0.090860112698343681, 0.098227641816234459, 0.095833448523728756, 0.11411187678531387, 0.09445644232760271, 0.10497810926880495, 0.090223133451140039, 0.094532380814080622, 0.092539400152726617], [0.097925705112070771, 0.098576865334428429, 0.10649585970485761, 0.10178705825063157, 0.097546268706115671, 0.098908070131836237, 0.10101159163655619, 0.097730804870452395, 0.092316535323317822, 0.11529727930087977], [0.10509603994758659, 0.10068881940738354, 0.10976745745655879, 0.11804033348011889, 0.11982882030568751, 0.19566352345655924, 0.10576720615446442, 0.10204633580858267, 0.10055372617927925, 0.10223165445793174], [0.11060226654448652, 0.12572979549903648, 0.1729305654812652, 0.10897068379235207, 0.28428388140131383, 0.11905292835497555, 0.11314594813597979, 0.10990570827359339, 0.19201677241689971, 0.10717792416435377], [53707.759212561024, 0.14263587403581302, 0.29144278922051148, 0.13180559038907105, 0.34899762995661388, 35.339562387175782, 0.12203030713732382, 0.12003673046263878, 132.11910729903749, 0.15823314901157945], [0.19041242339329337, 0.17282830399907759, 5.0365074494759554, 0.20887382658991943, 0.21320920019173059, 0.15272705216445581, 0.38809140589735519, 0.42377891559265363, 0.14864048087241175, 161.65601647690414], [0.35135407314754619, 59.450435748095501, 0.19870544653544592, 537.48631234963318, 26.253726072405566, 0.25210469497849319, 0.24348787861303725, 0.66092010165332038, 187.64222746358374, 32.266556433731033], [35898.114356706632, 0.37587981906498941, 2183.5274103017518, 0.71054759508753418, 1.4292167631950561, 1017.2677548665315, 11.770472755245638, 34.524062130706888, 56702.570416450711, 141197.53578080321], [24164.78927074093, 97690.475516806968, 560.35124529699146, 7939.2407927417908, 0.14330698460058952, 1172.5399970352532, 4196.5153631491867, 5148.1911243589248, 26586.206792288394, 117.55915421236485], [0.17462053580470061, 21720807.631996911, 624492.71137374139, 9970.0096482254157, 99433.593236498768, 3265.4806964907834, 678519.93356985296, 0.19045222197145675, 14462.622989450861, 245972.39169956776]], 'Rp': [[0.76117721707319708, 0.76153765054803346, 0.76134166663594371, 0.73618873773536153, 0.73036406028392764, 0.76095654766549992, 0.77102500554847031, 0.73490767335123675, 0.7624543659854498, 0.76374776873289185], [0.74799003645625695, 0.72757394963710575, 0.74403896856989804, 0.73992804876075546, 0.75119602475709168, 0.73099810062628867, 0.74263081113763862, 0.77331170984925945, 0.75535525615844046, 0.75916846107387614], [0.75615842994897486, 0.76253478109683948, 0.75496246308036685, 0.76289321807860844, 0.74189494390976307, 0.73940627405954618, 0.75426504264411209, 0.74064627204030908, 0.75018058585599701, 0.73494935314241605], [0.72697513546204673, 0.7463495122791054, 0.7255170848047503, 0.73615634342216074, 0.69214997646883913, 0.73972432318182468, 0.70862710450688893, 0.74931587485234374, 0.73783199989243908, 0.74195115682126833], [0.73247069753645866, 0.72713950844960018, 0.70983026618053013, 0.72249967884246558, 0.7289024306594194, 0.72385832558307961, 0.72259462445110201, 0.73174198499294996, 0.74499962194212777, 0.69170137531520937], [0.71163882023223313, 0.72609941436298631, 0.70212736024925682, 0.68563434391901212, 0.68579459078061467, 0.56719802736626268, 0.71048353337812842, 0.72139797994580235, 0.72339136394418002, 0.71745616915887067], [0.69918762633784781, 0.66267791160756284, 0.58754283836982257, 0.70046040326899761, 0.49334584103653978, 0.67645659741182407, 0.69371728758369322, 0.7018772908787152, 0.56835647285936131, 0.70633176811618326], [-0.0081245389011495705, 0.6347684099806995, 0.48203378541374997, 0.65477820709665224, 0.44162054636025316, 0.073816296103459522, 0.67393998682167777, 0.68073183920167091, 0.053426062950854676, 0.61484015772514466], [0.56809582829268235, 0.590843001708797, 0.10895648552624776, 0.55600133819611097, 0.53661311453420768, 0.61104091807133309, 0.42238357337390131, 0.41375846513416442, 0.61749034398660285, 0.047123260969704477], [0.44212287429190444, 0.077629349925023822, 0.52943256023608831, -0.000133651474130291, 0.065820894986794165, 0.49370422746173692, 0.49880733011978501, 0.31608329490191178, 0.019066474039969156, 0.041194868400885473], [0.020192242817150534, 0.40498832399038714, 0.030575189832604828, 0.30779265596972938, 0.22529381395615117, 0.028107935991871072, 0.1083230835370312, 0.064924960886788508, 0.029762741491927563, 0.022136691774030486], [0.027083891376184471, 0.050811616504727319, 0.016240987226211288, 0.020663309504861831, 0.61577192068514952, 0.054646396284317195, 0.0029590128106269774, 0.0012385740471890885, 0.012196748394282189, 0.053384598758423912], [0.57412993483405983, 0.0098065044937355825, 0.025328846890367691, 0.010596237790628982, 0.0091499981425980075, -0.0083629642025421988, 0.032082793328605211, 0.54120639488405708, 0.026734541804985842, 0.044180878544260033]]} 
average_performances = {'R^2': [0.5565404690242026, 0.5455998923602514, 0.5484233418699652, 0.5096727734433795, 0.49492295652334944, 0.41878853193627014, 0.27555935400427944, -27009.110953753163, -83.7811737600755, -422.4207672390159, -118672.0961404419, -83903.62545407817, -11747504.987676933], 'MSE': [0.087959573499020727, 0.090706993261275154, 0.090220104596789849, 0.097513020794182156, 0.10075960383711464, 0.11596839166541528, 0.14438164740642562, 5387.6533064317455, 16.859108553508101, 84.480583026237682, 23704.782589819217, 16757.60125636154, 2339692.4740283499], 'Rp': [0.75437006935600115, 0.74721913670266116, 0.74978913638569344, 0.73045985116916667, 0.7235738513952944, 0.69512216033373464, 0.64899540374705478, 0.43018307527530136, 0.44723063297937521, 0.24837282228899685, 0.12420976402476717, 0.085499705559197378, 0.1264853166510756]}


'''